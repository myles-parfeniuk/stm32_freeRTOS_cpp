
example_04_binary_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006c50  08006c50  00007c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d04  08006d04  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d04  08006d04  00007d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d0c  08006d0c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006d0c  08006d0c  00007d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d14  08006d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  20000068  08006d80  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e8  08006d80  000082e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001726c  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9f  00000000  00000000  0001f304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00022ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f75  00000000  00000000  000242c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd35  00000000  00000000  00025235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a877  00000000  00000000  00051f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff797  00000000  00000000  0006c7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016bf78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f8  00000000  00000000  0016bfbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001718b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c38 	.word	0x08006c38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006c38 	.word	0x08006c38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_ZN7CounterC1EPFvPvE>:
#include "Counter.h"

Counter::Counter(TaskFunction_t task_fxn):
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
task_counter_hdl(NULL), count(0){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2200      	movs	r2, #0
 8000574:	809a      	strh	r2, [r3, #4]
	/*
	 * Create the counter to increment count and print it over serial.
	 *
	 * This time we are passing the task function as an input argument rather than a member method.
	 */
	xTaskCreate(task_fxn, "Counter Task", 128, this, 1,
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	4904      	ldr	r1, [pc, #16]	@ (8000594 <_ZN7CounterC1EPFvPvE+0x34>)
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f004 f9f5 	bl	8004974 <xTaskCreate>
			&task_counter_hdl);
}
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	08006c50 	.word	0x08006c50

08000598 <_ZN7Counter15increment_countEv>:

uint16_t Counter::increment_count()
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	count++;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	889b      	ldrh	r3, [r3, #4]
 80005a4:	3301      	adds	r3, #1
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	809a      	strh	r2, [r3, #4]
	return count - 1;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	889b      	ldrh	r3, [r3, #4]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	b29b      	uxth	r3, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <_ZN3LedC1EP12GPIO_TypeDeftPFvPvE>:
#include "Led.h"

Led::Led(GPIO_TypeDef *gpio_port, uint16_t gpio_num, TaskFunction_t task_fxn):
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4613      	mov	r3, r2
 80005ce:	80fb      	strh	r3, [r7, #6]
task_blink_hdl(NULL), gpio_port(gpio_port), gpio_num(gpio_num)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	88fa      	ldrh	r2, [r7, #6]
 80005e0:	811a      	strh	r2, [r3, #8]
	/*
	 * Create the blink task to toggle gpio.
	 *
	 * This time we are passing the task function as an input argument rather than a member method.
	 */
		xTaskCreate(task_fxn, "Blink Task", 128, this, 1, &task_blink_hdl);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2280      	movs	r2, #128	@ 0x80
 80005ee:	4904      	ldr	r1, [pc, #16]	@ (8000600 <_ZN3LedC1EP12GPIO_TypeDeftPFvPvE+0x40>)
 80005f0:	6838      	ldr	r0, [r7, #0]
 80005f2:	f004 f9bf 	bl	8004974 <xTaskCreate>

}
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	08006c60 	.word	0x08006c60

08000604 <_ZN3Led3setEb>:

void Led::set(bool on)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(gpio_port, (1U << 8), on ? GPIO_PIN_RESET : GPIO_PIN_SET); //set pin according to led_state
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <_ZN3Led3setEb+0x1a>
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <_ZN3Led3setEb+0x1c>
 800061e:	2301      	movs	r3, #1
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000626:	f000 fed1 	bl	80013cc <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a07      	ldr	r2, [pc, #28]	@ (8000660 <vApplicationGetIdleTaskMemory+0x2c>)
 8000644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <vApplicationGetIdleTaskMemory+0x30>)
 800064a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2280      	movs	r2, #128	@ 0x80
 8000650:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084
 8000664:	20000124 	.word	0x20000124

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <MX_GPIO_Init+0x90>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <MX_GPIO_Init+0x90>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_GPIO_Init+0x90>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_GPIO_Init+0x90>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	4a17      	ldr	r2, [pc, #92]	@ (80006f8 <MX_GPIO_Init+0x90>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_GPIO_Init+0x90>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_GPIO_Init+0x90>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	4a11      	ldr	r2, [pc, #68]	@ (80006f8 <MX_GPIO_Init+0x90>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_GPIO_Init+0x90>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <MX_GPIO_Init+0x94>)
 80006ce:	f000 fe7d 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_GPIO_Init+0x94>)
 80006ec:	f000 fcc4 	bl	8001078 <HAL_GPIO_Init>

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000800 	.word	0x48000800

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fb9d 	bl	8000e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f808 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f7ff ffac 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 fae2 	bl	8000cd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //jump to cpp program, don't return
  main_cpp();
 8000714:	f000 f8e4 	bl	80008e0 <main_cpp>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <main+0x18>

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b096      	sub	sp, #88	@ 0x58
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2244      	movs	r2, #68	@ 0x44
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 fe18 	bl	8006360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000742:	f000 fe69 	bl	8001418 <HAL_PWREx_ControlVoltageScaling>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800074c:	f000 f848 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	2303      	movs	r3, #3
 8000760:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000766:	2314      	movs	r3, #20
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800076a:	2307      	movs	r3, #7
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fea2 	bl	80014c4 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000786:	f000 f82b 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	2104      	movs	r1, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fa6a 	bl	8001c7c <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ae:	f000 f817 	bl	80007e0 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3758      	adds	r7, #88	@ 0x58
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ce:	f000 fb51 	bl	8000e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <_ZZ8main_cppENKUlPvE_clES_>:
//create a binary semaphore to control the execution of the led task from the counter task
SemaphoreHandle_t sem_bin_blink = xSemaphoreCreateBinary();

int main_cpp() {

	static Led led(GPIO_PORT, GPIO_NUM, [](void *arg) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
		static bool led_state = true; //whether the led is on or off
		led.set(true); //initially set LED high
 80007f6:	2101      	movs	r1, #1
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <_ZZ8main_cppENKUlPvE_clES_+0x40>)
 80007fa:	f7ff ff03 	bl	8000604 <_ZN3Led3setEb>

		while (1) {

			//take the semaphore and block indefinitely, task will unblock when the counter_task calls xSemaphoreGive
			xSemaphoreTake(sem_bin_blink, portMAX_DELAY);
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <_ZZ8main_cppENKUlPvE_clES_+0x44>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f04f 31ff 	mov.w	r1, #4294967295
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fe42 	bl	8004490 <xQueueSemaphoreTake>

			//toggle led
			led.set(led_state);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <_ZZ8main_cppENKUlPvE_clES_+0x48>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <_ZZ8main_cppENKUlPvE_clES_+0x40>)
 8000814:	f7ff fef6 	bl	8000604 <_ZN3Led3setEb>
			led_state = !led_state;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <_ZZ8main_cppENKUlPvE_clES_+0x48>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	f083 0301 	eor.w	r3, r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <_ZZ8main_cppENKUlPvE_clES_+0x48>)
 8000824:	701a      	strb	r2, [r3, #0]
			xSemaphoreTake(sem_bin_blink, portMAX_DELAY);
 8000826:	bf00      	nop
 8000828:	e7e9      	b.n	80007fe <_ZZ8main_cppENKUlPvE_clES_+0x12>
 800082a:	bf00      	nop
 800082c:	20000328 	.word	0x20000328
 8000830:	20000324 	.word	0x20000324
 8000834:	20000004 	.word	0x20000004

08000838 <_ZZ8main_cppENUlPvE_4_FUNES_>:
	static Led led(GPIO_PORT, GPIO_NUM, [](void *arg) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
		}
	});
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ffd2 	bl	80007ec <_ZZ8main_cppENKUlPvE_clES_>
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <_ZZ8main_cppENKUlPvE_cvPFvS_EEv>:
	static Led led(GPIO_PORT, GPIO_NUM, [](void *arg) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	});
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <_ZZ8main_cppENKUlPvE_cvPFvS_EEv+0x18>)
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	08000839 	.word	0x08000839

0800086c <_ZZ8main_cppENKUlPvE0_clES_>:

	static Counter counter( [](void *arg) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]

		while (1) {

			//delay for 1000ms
			vTaskDelay(1000 / portTICK_PERIOD_MS);
 8000876:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087a:	f004 f9cb 	bl	8004c14 <vTaskDelay>
			//print the current count and increment it
			print_serial("Blink Count: %d \r\n", counter.increment_count());
 800087e:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <_ZZ8main_cppENKUlPvE0_clES_+0x34>)
 8000880:	f7ff fe8a 	bl	8000598 <_ZN7Counter15increment_countEv>
 8000884:	4603      	mov	r3, r0
 8000886:	4619      	mov	r1, r3
 8000888:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <_ZZ8main_cppENKUlPvE0_clES_+0x38>)
 800088a:	f000 f8ad 	bl	80009e8 <_Z12print_serialPKcz>

			//signal the led_task to run by giving the blink semaphore
			xSemaphoreGive(sem_bin_blink);
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <_ZZ8main_cppENKUlPvE0_clES_+0x3c>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	f003 fcf8 	bl	800428c <xQueueGenericSend>
			vTaskDelay(1000 / portTICK_PERIOD_MS);
 800089c:	bf00      	nop
 800089e:	e7ea      	b.n	8000876 <_ZZ8main_cppENKUlPvE0_clES_+0xa>
 80008a0:	20000338 	.word	0x20000338
 80008a4:	08006c6c 	.word	0x08006c6c
 80008a8:	20000324 	.word	0x20000324

080008ac <_ZZ8main_cppENUlPvE0_4_FUNES_>:
	static Counter counter( [](void *arg) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
		}
	});
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ffd8 	bl	800086c <_ZZ8main_cppENKUlPvE0_clES_>
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <_ZZ8main_cppENKUlPvE0_cvPFvS_EEv>:
	static Counter counter( [](void *arg) {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	});
 80008cc:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <_ZZ8main_cppENKUlPvE0_cvPFvS_EEv+0x18>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	080008ad 	.word	0x080008ad

080008e0 <main_cpp>:
int main_cpp() {
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
	});
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <main_cpp+0xac>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f3bf 8f5b 	dmb	ish
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf0c      	ite	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	2300      	movne	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d019      	beq.n	8000934 <main_cpp+0x54>
 8000900:	4822      	ldr	r0, [pc, #136]	@ (800098c <main_cpp+0xac>)
 8000902:	f005 fc01 	bl	8006108 <__cxa_guard_acquire>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00e      	beq.n	8000934 <main_cpp+0x54>
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <main_cpp+0xb0>)
 8000918:	681c      	ldr	r4, [r3, #0]
 800091a:	463b      	mov	r3, r7
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff97 	bl	8000850 <_ZZ8main_cppENKUlPvE_cvPFvS_EEv>
 8000922:	4603      	mov	r3, r0
 8000924:	2208      	movs	r2, #8
 8000926:	4621      	mov	r1, r4
 8000928:	481a      	ldr	r0, [pc, #104]	@ (8000994 <main_cpp+0xb4>)
 800092a:	f7ff fe49 	bl	80005c0 <_ZN3LedC1EP12GPIO_TypeDeftPFvPvE>
 800092e:	4817      	ldr	r0, [pc, #92]	@ (800098c <main_cpp+0xac>)
 8000930:	f005 fbf6 	bl	8006120 <__cxa_guard_release>
	});
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <main_cpp+0xb8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f3bf 8f5b 	dmb	ish
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	bf0c      	ite	eq
 8000944:	2301      	moveq	r3, #1
 8000946:	2300      	movne	r3, #0
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d016      	beq.n	800097c <main_cpp+0x9c>
 800094e:	4812      	ldr	r0, [pc, #72]	@ (8000998 <main_cpp+0xb8>)
 8000950:	f005 fbda 	bl	8006108 <__cxa_guard_acquire>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00b      	beq.n	800097c <main_cpp+0x9c>
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ffac 	bl	80008c4 <_ZZ8main_cppENKUlPvE0_cvPFvS_EEv>
 800096c:	4603      	mov	r3, r0
 800096e:	4619      	mov	r1, r3
 8000970:	480a      	ldr	r0, [pc, #40]	@ (800099c <main_cpp+0xbc>)
 8000972:	f7ff fdf5 	bl	8000560 <_ZN7CounterC1EPFvPvE>
 8000976:	4808      	ldr	r0, [pc, #32]	@ (8000998 <main_cpp+0xb8>)
 8000978:	f005 fbd2 	bl	8006120 <__cxa_guard_release>

	/*
	 * Start the task scheduler and begin executing tasks.
	 * The program will not proceed to the return statement below this.
	 */
	vTaskStartScheduler();
 800097c:	f004 f980 	bl	8004c80 <vTaskStartScheduler>

	return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bd90      	pop	{r4, r7, pc}
 800098a:	bf00      	nop
 800098c:	20000334 	.word	0x20000334
 8000990:	20000000 	.word	0x20000000
 8000994:	20000328 	.word	0x20000328
 8000998:	20000340 	.word	0x20000340
 800099c:	20000338 	.word	0x20000338

080009a0 <_Z41__static_initialization_and_destruction_0ii>:
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10c      	bne.n	80009ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d107      	bne.n	80009ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
SemaphoreHandle_t sem_bin_blink = xSemaphoreCreateBinary();
 80009ba:	2203      	movs	r2, #3
 80009bc:	2100      	movs	r1, #0
 80009be:	2001      	movs	r0, #1
 80009c0:	f003 fc0a 	bl	80041d8 <xQueueGenericCreate>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a03      	ldr	r2, [pc, #12]	@ (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80009c8:	6013      	str	r3, [r2, #0]
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000324 	.word	0x20000324

080009d8 <_GLOBAL__sub_I_GPIO_PORT>:
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
 80009dc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff ffdd 	bl	80009a0 <_Z41__static_initialization_and_destruction_0ii>
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_Z12print_serialPKcz>:
#include "print_serial.h"

void print_serial(const char *format, ...) {
 80009e8:	b40f      	push	{r0, r1, r2, r3}
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
	va_list args;
	va_list args_copy;
	int buffer_sz;
	char *buffer = nullptr;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]

	//variable argument list parsing
	va_start(args, format);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	607b      	str	r3, [r7, #4]

	va_copy(args_copy, args);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	603b      	str	r3, [r7, #0]
	buffer_sz = vsnprintf(nullptr, 0, format, args_copy);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f005 fc9d 	bl	8006344 <vsniprintf>
 8000a0a:	60b8      	str	r0, [r7, #8]
	va_end(args_copy);

	if (buffer_sz >= 0) {
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db1e      	blt.n	8000a50 <_Z12print_serialPKcz+0x68>
		//allocate memory for string
		buffer = new char[buffer_sz + 1]; //+1 for null terminator
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fb85 	bl	8006126 <_Znaj>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60fb      	str	r3, [r7, #12]

		if (buffer != nullptr) {
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d014      	beq.n	8000a50 <_Z12print_serialPKcz+0x68>
			vsnprintf(buffer, buffer_sz + 1, format, args);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f005 fc87 	bl	8006344 <vsniprintf>
			HAL_UART_Transmit(&huart2, (const uint8_t*) (buffer), buffer_sz, 1);
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <_Z12print_serialPKcz+0x78>)
 8000a40:	f002 fd4e 	bl	80034e0 <HAL_UART_Transmit>

			//free memory from string buffer
			delete[] buffer;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <_Z12print_serialPKcz+0x68>
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f005 fb5a 	bl	8006104 <_ZdaPv>
		}

	}

	va_end(args);
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a5a:	b004      	add	sp, #16
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000404 	.word	0x20000404

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6e:	4a10      	ldr	r2, [pc, #64]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	f06f 0001 	mvn.w	r0, #1
 8000aa2:	f000 fabf 	bl	8001024 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac2:	4b31      	ldr	r3, [pc, #196]	@ (8000b88 <HAL_InitTick+0xd4>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	4a30      	ldr	r2, [pc, #192]	@ (8000b88 <HAL_InitTick+0xd4>)
 8000ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ace:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <HAL_InitTick+0xd4>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ada:	f107 020c 	add.w	r2, r7, #12
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fa8d 	bl	8002004 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aea:	f001 fa75 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8000aee:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af2:	4a26      	ldr	r2, [pc, #152]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	0c9b      	lsrs	r3, r3, #18
 8000afa:	3b01      	subs	r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000afe:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b00:	4a24      	ldr	r2, [pc, #144]	@ (8000b94 <HAL_InitTick+0xe0>)
 8000b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b0a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b0c:	4a20      	ldr	r2, [pc, #128]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b10:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b24:	481a      	ldr	r0, [pc, #104]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b26:	f001 ffbb 	bl	8002aa0 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11b      	bne.n	8000b70 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b38:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b3a:	f002 f81f 	bl	8002b7c <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b4c:	2019      	movs	r0, #25
 8000b4e:	f000 fa85 	bl	800105c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d808      	bhi.n	8000b6a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2019      	movs	r0, #25
 8000b5e:	f000 fa61 	bl	8001024 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_InitTick+0xe4>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e002      	b.n	8000b70 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim1, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8000b70:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_InitTick+0xe8>)
 8000b72:	210e      	movs	r1, #14
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b76:	f002 f9f5 	bl	8002f64 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8000b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3730      	adds	r7, #48	@ 0x30
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	20000344 	.word	0x20000344
 8000b94:	40012c00 	.word	0x40012c00
 8000b98:	2000000c 	.word	0x2000000c
 8000b9c:	08000ba1 	.word	0x08000ba1

08000ba0 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000ba8:	f000 f964 	bl	8000e74 <HAL_IncTick>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bf2:	f002 f833 	bl	8002c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000344 	.word	0x20000344

08000c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return 1;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_kill>:

int _kill(int pid, int sig)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c1a:	f005 fc53 	bl	80064c4 <__errno>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2216      	movs	r2, #22
 8000c22:	601a      	str	r2, [r3, #0]
  return -1;
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_exit>:

void _exit (int status)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ffe7 	bl	8000c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c42:	bf00      	nop
 8000c44:	e7fd      	b.n	8000c42 <_exit+0x12>
	...

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f005 fc24 	bl	80064c4 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20018000 	.word	0x20018000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	20000400 	.word	0x20000400
 8000cb0:	200012e8 	.word	0x200012e8

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cde:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <MX_USART2_UART_Init+0x5c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d1c:	f002 fb92 	bl	8003444 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d26:	f7ff fd5b 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000404 	.word	0x20000404
 8000d34:	40004400 	.word	0x40004400

08000d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2288      	movs	r2, #136	@ 0x88
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f005 fb01 	bl	8006360 <memset>
  if(uartHandle->Instance==USART2)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a21      	ldr	r2, [pc, #132]	@ (8000de8 <HAL_UART_MspInit+0xb0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d13b      	bne.n	8000de0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 f9d7 	bl	8002128 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d80:	f7ff fd2e 	bl	80007e0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_UART_MspInit+0xb4>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d88:	4a18      	ldr	r2, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0xb4>)
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <HAL_UART_MspInit+0xb4>)
 8000d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_UART_MspInit+0xb4>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da0:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <HAL_UART_MspInit+0xb4>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da8:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_UART_MspInit+0xb4>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000db4:	230c      	movs	r3, #12
 8000db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f000 f94c 	bl	8001078 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000de0:	bf00      	nop
 8000de2:	37b0      	adds	r7, #176	@ 0xb0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40021000 	.word	0x40021000

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff ff5e 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f005 fb57 	bl	80064d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fc6d 	bl	8000700 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e34:	08006d18 	.word	0x08006d18
  ldr r2, =_sbss
 8000e38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e3c:	200012e8 	.word	0x200012e8

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>

08000e42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f8de 	bl	800100e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	200f      	movs	r0, #15
 8000e54:	f7ff fe2e 	bl	8000ab4 <HAL_InitTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	e001      	b.n	8000e68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e64:	f7ff fdfe 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000010 	.word	0x20000010
 8000e98:	2000048c 	.word	0x2000048c

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	2000048c 	.word	0x2000048c

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff4c 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001036:	f7ff ff61 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800103a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff ffb1 	bl	8000fa8 <NVIC_EncodePriority>
 8001046:	4602      	mov	r2, r0
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <__NVIC_SetPriority>
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff54 	bl	8000f18 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e17f      	b.n	8001388 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8171 	beq.w	8001382 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x40>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b03      	cmp	r3, #3
 8001124:	d118      	bne.n	8001158 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	6939      	ldr	r1, [r7, #16]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80ac 	beq.w	8001382 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b5f      	ldr	r3, [pc, #380]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122e:	4a5e      	ldr	r2, [pc, #376]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6613      	str	r3, [r2, #96]	@ 0x60
 8001236:	4b5c      	ldr	r3, [pc, #368]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001242:	4a5a      	ldr	r2, [pc, #360]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x242>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4f      	ldr	r2, [pc, #316]	@ (80013b0 <HAL_GPIO_Init+0x338>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x23e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4e      	ldr	r2, [pc, #312]	@ (80013b4 <HAL_GPIO_Init+0x33c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x23a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4d      	ldr	r2, [pc, #308]	@ (80013b8 <HAL_GPIO_Init+0x340>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x236>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4c      	ldr	r2, [pc, #304]	@ (80013bc <HAL_GPIO_Init+0x344>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x232>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4b      	ldr	r2, [pc, #300]	@ (80013c0 <HAL_GPIO_Init+0x348>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x22e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4a      	ldr	r2, [pc, #296]	@ (80013c4 <HAL_GPIO_Init+0x34c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x22a>
 800129e:	2306      	movs	r3, #6
 80012a0:	e00c      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e00a      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x244>
 80012ba:	2300      	movs	r3, #0
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012cc:	4937      	ldr	r1, [pc, #220]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012da:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012fe:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001304:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001328:	4a27      	ldr	r2, [pc, #156]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001352:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800137c:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <HAL_GPIO_Init+0x350>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f ae78 	bne.w	8001088 <HAL_GPIO_Init+0x10>
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48000800 	.word	0x48000800
 80013b8:	48000c00 	.word	0x48000c00
 80013bc:	48001000 	.word	0x48001000
 80013c0:	48001400 	.word	0x48001400
 80013c4:	48001800 	.word	0x48001800
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <HAL_PWREx_GetVoltageRange+0x18>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001426:	d130      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001434:	d038      	beq.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800143e:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2232      	movs	r2, #50	@ 0x32
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	3301      	adds	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145c:	e002      	b.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3b01      	subs	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001470:	d102      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f2      	bne.n	800145e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001484:	d110      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e00f      	b.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001496:	d007      	beq.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014a0:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40007000 	.word	0x40007000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3ca      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d6:	4b97      	ldr	r3, [pc, #604]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e0:	4b94      	ldr	r3, [pc, #592]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80e4 	beq.w	80016c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_RCC_OscConfig+0x4a>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	f040 808b 	bne.w	800161c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b01      	cmp	r3, #1
 800150a:	f040 8087 	bne.w	800161c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150e:	4b89      	ldr	r3, [pc, #548]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x62>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e3a2      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1a      	ldr	r2, [r3, #32]
 800152a:	4b82      	ldr	r3, [pc, #520]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <HAL_RCC_OscConfig+0x7c>
 8001536:	4b7f      	ldr	r3, [pc, #508]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800153e:	e005      	b.n	800154c <HAL_RCC_OscConfig+0x88>
 8001540:	4b7c      	ldr	r3, [pc, #496]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800154c:	4293      	cmp	r3, r2
 800154e:	d223      	bcs.n	8001598 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fd87 	bl	8002068 <RCC_SetFlashLatencyFromMSIRange>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e383      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001564:	4b73      	ldr	r3, [pc, #460]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a72      	ldr	r2, [pc, #456]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b70      	ldr	r3, [pc, #448]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	496d      	ldr	r1, [pc, #436]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001582:	4b6c      	ldr	r3, [pc, #432]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4968      	ldr	r1, [pc, #416]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
 8001596:	e025      	b.n	80015e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001598:	4b66      	ldr	r3, [pc, #408]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a65      	ldr	r2, [pc, #404]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4960      	ldr	r1, [pc, #384]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	495b      	ldr	r1, [pc, #364]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fd47 	bl	8002068 <RCC_SetFlashLatencyFromMSIRange>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e343      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e4:	f000 fc4a 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b52      	ldr	r3, [pc, #328]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	4950      	ldr	r1, [pc, #320]	@ (8001738 <HAL_RCC_OscConfig+0x274>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <HAL_RCC_OscConfig+0x278>)
 8001602:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001604:	4b4e      	ldr	r3, [pc, #312]	@ (8001740 <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa53 	bl	8000ab4 <HAL_InitTick>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d052      	beq.n	80016be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	e327      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d032      	beq.n	800168a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001624:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a42      	ldr	r2, [pc, #264]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001630:	f7ff fc34 	bl	8000e9c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001638:	f7ff fc30 	bl	8000e9c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e310      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164a:	4b3a      	ldr	r3, [pc, #232]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a36      	ldr	r2, [pc, #216]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4931      	ldr	r1, [pc, #196]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	492c      	ldr	r1, [pc, #176]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
 8001688:	e01a      	b.n	80016c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a29      	ldr	r2, [pc, #164]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001696:	f7ff fc01 	bl	8000e9c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169e:	f7ff fbfd 	bl	8000e9c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e2dd      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b0:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x1da>
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d074      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x21a>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d10e      	bne.n	80016f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d10b      	bne.n	80016f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d064      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d160      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e2ba      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x24a>
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e026      	b.n	800175c <HAL_RCC_OscConfig+0x298>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001716:	d115      	bne.n	8001744 <HAL_RCC_OscConfig+0x280>
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800171e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a02      	ldr	r2, [pc, #8]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e014      	b.n	800175c <HAL_RCC_OscConfig+0x298>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	08006c88 	.word	0x08006c88
 800173c:	20000008 	.word	0x20000008
 8001740:	2000000c 	.word	0x2000000c
 8001744:	4ba0      	ldr	r3, [pc, #640]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a9f      	ldr	r2, [pc, #636]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800174a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b9d      	ldr	r3, [pc, #628]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a9c      	ldr	r2, [pc, #624]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fb9a 	bl	8000e9c <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fb96 	bl	8000e9c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e276      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	4b92      	ldr	r3, [pc, #584]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x2a8>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb86 	bl	8000e9c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fb82 	bl	8000e9c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	@ 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e262      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a6:	4b88      	ldr	r3, [pc, #544]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x2d0>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d060      	beq.n	8001884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x310>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d116      	bne.n	8001802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	4b7c      	ldr	r3, [pc, #496]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_OscConfig+0x328>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e23f      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	4973      	ldr	r1, [pc, #460]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001800:	e040      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d023      	beq.n	8001852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180a:	4b6f      	ldr	r3, [pc, #444]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6e      	ldr	r2, [pc, #440]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff fb41 	bl	8000e9c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fb3d 	bl	8000e9c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e21d      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001830:	4b65      	ldr	r3, [pc, #404]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b62      	ldr	r3, [pc, #392]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	495f      	ldr	r1, [pc, #380]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	e018      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b5d      	ldr	r3, [pc, #372]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a5c      	ldr	r2, [pc, #368]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800185c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fb1d 	bl	8000e9c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fb19 	bl	8000e9c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e1f9      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001878:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d03c      	beq.n	800190a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001898:	4b4b      	ldr	r3, [pc, #300]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189e:	4a4a      	ldr	r2, [pc, #296]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff faf8 	bl	8000e9c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff faf4 	bl	8000e9c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1d4      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ef      	beq.n	80018b0 <HAL_RCC_OscConfig+0x3ec>
 80018d0:	e01b      	b.n	800190a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d8:	4a3b      	ldr	r2, [pc, #236]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff fadb 	bl	8000e9c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff fad7 	bl	8000e9c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e1b7      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a6 	beq.w	8001a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001932:	6593      	str	r3, [r2, #88]	@ 0x58
 8001934:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001940:	2301      	movs	r3, #1
 8001942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001944:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d118      	bne.n	8001982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001950:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1d      	ldr	r2, [pc, #116]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195c:	f7ff fa9e 	bl	8000e9c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001964:	f7ff fa9a 	bl	8000e9c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e17a      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x4d8>
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800199a:	e029      	b.n	80019f0 <HAL_RCC_OscConfig+0x52c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_OscConfig+0x50c>
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019aa:	4a07      	ldr	r2, [pc, #28]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	4a03      	ldr	r2, [pc, #12]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x52c>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a9b      	ldr	r2, [pc, #620]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e0:	4b98      	ldr	r3, [pc, #608]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a97      	ldr	r2, [pc, #604]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa50 	bl	8000e9c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa4c 	bl	8000e9c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e12a      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a16:	4b8b      	ldr	r3, [pc, #556]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ed      	beq.n	8001a00 <HAL_RCC_OscConfig+0x53c>
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa39 	bl	8000e9c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fa35 	bl	8000e9c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e113      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a44:	4b7f      	ldr	r3, [pc, #508]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ed      	bne.n	8001a2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b7a      	ldr	r3, [pc, #488]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	4a79      	ldr	r2, [pc, #484]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80fe 	beq.w	8001c6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	f040 80d0 	bne.w	8001c18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a78:	4b72      	ldr	r3, [pc, #456]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0203 	and.w	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d130      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	3b01      	subs	r3, #1
 8001a98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d127      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d11f      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ab8:	2a07      	cmp	r2, #7
 8001aba:	bf14      	ite	ne
 8001abc:	2201      	movne	r2, #1
 8001abe:	2200      	moveq	r2, #0
 8001ac0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d113      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d06e      	beq.n	8001bcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	d069      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001af4:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b00:	4b50      	ldr	r3, [pc, #320]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0ad      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b10:	4b4c      	ldr	r3, [pc, #304]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b1c:	f7ff f9be 	bl	8000e9c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f9ba 	bl	8000e9c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e09a      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	4b43      	ldr	r3, [pc, #268]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b42:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4b40      	ldr	r3, [pc, #256]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b52:	3a01      	subs	r2, #1
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b5c:	0212      	lsls	r2, r2, #8
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b64:	0852      	lsrs	r2, r2, #1
 8001b66:	3a01      	subs	r2, #1
 8001b68:	0552      	lsls	r2, r2, #21
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b70:	0852      	lsrs	r2, r2, #1
 8001b72:	3a01      	subs	r2, #1
 8001b74:	0652      	lsls	r2, r2, #25
 8001b76:	4311      	orrs	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b7c:	0912      	lsrs	r2, r2, #4
 8001b7e:	0452      	lsls	r2, r2, #17
 8001b80:	430a      	orrs	r2, r1
 8001b82:	4930      	ldr	r1, [pc, #192]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b88:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b94:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a2a      	ldr	r2, [pc, #168]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba0:	f7ff f97c 	bl	8000e9c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f978 	bl	8000e9c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e058      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc6:	e050      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e04f      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d148      	bne.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be4:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4a16      	ldr	r2, [pc, #88]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf0:	f7ff f954 	bl	8000e9c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f950 	bl	8000e9c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e030      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x734>
 8001c16:	e028      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d023      	beq.n	8001c66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff f937 	bl	8000e9c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	e00c      	b.n	8001c4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff f933 	bl	8000e9c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d905      	bls.n	8001c4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e013      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
 8001c44:	40021000 	.word	0x40021000
 8001c48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_RCC_OscConfig+0x7b0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ec      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_RCC_OscConfig+0x7b0>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	4905      	ldr	r1, [pc, #20]	@ (8001c74 <HAL_RCC_OscConfig+0x7b0>)
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_RCC_OscConfig+0x7b4>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
 8001c64:	e001      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	feeefffc 	.word	0xfeeefffc

08001c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0e7      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b75      	ldr	r3, [pc, #468]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d910      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b72      	ldr	r3, [pc, #456]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	4970      	ldr	r1, [pc, #448]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b6e      	ldr	r3, [pc, #440]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0cf      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b66      	ldr	r3, [pc, #408]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d908      	bls.n	8001cee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cdc:	4b63      	ldr	r3, [pc, #396]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4960      	ldr	r1, [pc, #384]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d04c      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	4b5a      	ldr	r3, [pc, #360]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d121      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0a6      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e09a      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d32:	4b4e      	ldr	r3, [pc, #312]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e08e      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d42:	4b4a      	ldr	r3, [pc, #296]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e086      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b46      	ldr	r3, [pc, #280]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4943      	ldr	r1, [pc, #268]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d64:	f7ff f89a 	bl	8000e9c <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7ff f896 	bl	8000e9c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e06e      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	4b3a      	ldr	r3, [pc, #232]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 020c 	and.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1eb      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d208      	bcs.n	8001dc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	492b      	ldr	r1, [pc, #172]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d210      	bcs.n	8001df2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd0:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 0207 	bic.w	r2, r3, #7
 8001dd8:	4923      	ldr	r1, [pc, #140]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e036      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4918      	ldr	r1, [pc, #96]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4910      	ldr	r1, [pc, #64]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e30:	f000 f824 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	490b      	ldr	r1, [pc, #44]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f4>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_RCC_ClockConfig+0x1fc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fe2d 	bl	8000ab4 <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08006c88 	.word	0x08006c88
 8001e74:	20000008 	.word	0x20000008
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e94:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d121      	bne.n	8001eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d11e      	bne.n	8001eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb0:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ebc:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e005      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10d      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	e004      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f00:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d134      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d003      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0xac>
 8001f20:	e005      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f24:	617b      	str	r3, [r7, #20]
      break;
 8001f26:	e005      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f2a:	617b      	str	r3, [r7, #20]
      break;
 8001f2c:	e002      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	617b      	str	r3, [r7, #20]
      break;
 8001f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	3301      	adds	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	fb03 f202 	mul.w	r2, r3, r2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	0e5b      	lsrs	r3, r3, #25
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	3301      	adds	r3, #1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f74:	69bb      	ldr	r3, [r7, #24]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08006ca0 	.word	0x08006ca0
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	007a1200 	.word	0x007a1200

08001f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000008 	.word	0x20000008

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4904      	ldr	r1, [pc, #16]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08006c98 	.word	0x08006c98

08001fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fdc:	f7ff ffda 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0adb      	lsrs	r3, r3, #11
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4904      	ldr	r1, [pc, #16]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08006c98 	.word	0x08006c98

08002004 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	220f      	movs	r2, #15
 8002012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <HAL_RCC_GetClockConfig+0x60>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0207 	and.w	r2, r3, #7
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40022000 	.word	0x40022000

08002068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002080:	f7ff f9bc 	bl	80013fc <HAL_PWREx_GetVoltageRange>
 8002084:	6178      	str	r0, [r7, #20]
 8002086:	e014      	b.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208c:	4a24      	ldr	r2, [pc, #144]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002092:	6593      	str	r3, [r2, #88]	@ 0x58
 8002094:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020a0:	f7ff f9ac 	bl	80013fc <HAL_PWREx_GetVoltageRange>
 80020a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020b8:	d10b      	bne.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b80      	cmp	r3, #128	@ 0x80
 80020be:	d919      	bls.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80020c4:	d902      	bls.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c6:	2302      	movs	r3, #2
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	e013      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020cc:	2301      	movs	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e010      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b80      	cmp	r3, #128	@ 0x80
 80020d6:	d902      	bls.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020d8:	2303      	movs	r3, #3
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	e00a      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b80      	cmp	r3, #128	@ 0x80
 80020e2:	d102      	bne.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e4:	2302      	movs	r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	e004      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b70      	cmp	r3, #112	@ 0x70
 80020ee:	d101      	bne.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 0207 	bic.w	r2, r3, #7
 80020fc:	4909      	ldr	r1, [pc, #36]	@ (8002124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002104:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	40022000 	.word	0x40022000

08002128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002130:	2300      	movs	r3, #0
 8002132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002134:	2300      	movs	r3, #0
 8002136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002140:	2b00      	cmp	r3, #0
 8002142:	d041      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002148:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800214c:	d02a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800214e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002152:	d824      	bhi.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002154:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002158:	d008      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800215a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800215e:	d81e      	bhi.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002168:	d010      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800216a:	e018      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800216c:	4b86      	ldr	r3, [pc, #536]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a85      	ldr	r2, [pc, #532]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002178:	e015      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fabb 	bl	80026fc <RCCEx_PLLSAI1_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218a:	e00c      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3320      	adds	r3, #32
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fba6 	bl	80028e4 <RCCEx_PLLSAI2_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800219c:	e003      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	74fb      	strb	r3, [r7, #19]
      break;
 80021a2:	e000      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ac:	4b76      	ldr	r3, [pc, #472]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021ba:	4973      	ldr	r1, [pc, #460]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021c2:	e001      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d041      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021dc:	d02a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021e2:	d824      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021e8:	d008      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021ee:	d81e      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f8:	d010      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021fa:	e018      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021fc:	4b62      	ldr	r3, [pc, #392]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a61      	ldr	r2, [pc, #388]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002208:	e015      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fa73 	bl	80026fc <RCCEx_PLLSAI1_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800221a:	e00c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3320      	adds	r3, #32
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fb5e 	bl	80028e4 <RCCEx_PLLSAI2_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800222c:	e003      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	74fb      	strb	r3, [r7, #19]
      break;
 8002232:	e000      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800223c:	4b52      	ldr	r3, [pc, #328]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800224a:	494f      	ldr	r1, [pc, #316]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002252:	e001      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a0 	beq.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800226a:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b41      	ldr	r3, [pc, #260]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	4a40      	ldr	r2, [pc, #256]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	@ 0x58
 800228c:	4b3e      	ldr	r3, [pc, #248]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002298:	2301      	movs	r3, #1
 800229a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229c:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a3a      	ldr	r2, [pc, #232]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022a8:	f7fe fdf8 	bl	8000e9c <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ae:	e009      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7fe fdf4 	bl	8000e9c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d902      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	74fb      	strb	r3, [r7, #19]
        break;
 80022c2:	e005      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c4:	4b31      	ldr	r3, [pc, #196]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ef      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d15c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d019      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022f4:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002300:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	4a20      	ldr	r2, [pc, #128]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002310:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	4a1c      	ldr	r2, [pc, #112]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002320:	4a19      	ldr	r2, [pc, #100]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe fdb3 	bl	8000e9c <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002338:	e00b      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fdaf 	bl	8000e9c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d902      	bls.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	74fb      	strb	r3, [r7, #19]
            break;
 8002350:	e006      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ec      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002376:	4904      	ldr	r1, [pc, #16]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800237e:	e009      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
 8002384:	e006      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002394:	7c7b      	ldrb	r3, [r7, #17]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b9e      	ldr	r3, [pc, #632]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	4a9d      	ldr	r2, [pc, #628]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b2:	4b98      	ldr	r3, [pc, #608]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b8:	f023 0203 	bic.w	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c0:	4994      	ldr	r1, [pc, #592]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 020c 	bic.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e2:	498c      	ldr	r1, [pc, #560]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023f6:	4b87      	ldr	r3, [pc, #540]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	4983      	ldr	r1, [pc, #524]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002418:	4b7e      	ldr	r3, [pc, #504]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	497b      	ldr	r1, [pc, #492]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800243a:	4b76      	ldr	r3, [pc, #472]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002448:	4972      	ldr	r1, [pc, #456]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800245c:	4b6d      	ldr	r3, [pc, #436]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	496a      	ldr	r1, [pc, #424]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800247e:	4b65      	ldr	r3, [pc, #404]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002484:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	4961      	ldr	r1, [pc, #388]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ae:	4959      	ldr	r1, [pc, #356]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c2:	4b54      	ldr	r3, [pc, #336]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d0:	4950      	ldr	r1, [pc, #320]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f2:	4948      	ldr	r1, [pc, #288]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002506:	4b43      	ldr	r3, [pc, #268]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	493f      	ldr	r1, [pc, #252]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d028      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002528:	4b3a      	ldr	r3, [pc, #232]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002536:	4937      	ldr	r1, [pc, #220]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002546:	d106      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002548:	4b32      	ldr	r3, [pc, #200]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a31      	ldr	r2, [pc, #196]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002552:	60d3      	str	r3, [r2, #12]
 8002554:	e011      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800255a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800255e:	d10c      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	2101      	movs	r1, #1
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f8c8 	bl	80026fc <RCCEx_PLLSAI1_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d028      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	491f      	ldr	r1, [pc, #124]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025a4:	d106      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025b0:	60d3      	str	r3, [r2, #12]
 80025b2:	e011      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2101      	movs	r1, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f899 	bl	80026fc <RCCEx_PLLSAI1_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d02b      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f2:	4908      	ldr	r1, [pc, #32]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002602:	d109      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a02      	ldr	r2, [pc, #8]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800260e:	60d3      	str	r3, [r2, #12]
 8002610:	e014      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800261c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002620:	d10c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2101      	movs	r1, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f867 	bl	80026fc <RCCEx_PLLSAI1_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d02f      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002648:	4b2b      	ldr	r3, [pc, #172]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002656:	4928      	ldr	r1, [pc, #160]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002666:	d10d      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	2102      	movs	r1, #2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f844 	bl	80026fc <RCCEx_PLLSAI1_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d014      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	74bb      	strb	r3, [r7, #18]
 8002682:	e011      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3320      	adds	r3, #32
 8002692:	2102      	movs	r1, #2
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f925 	bl	80028e4 <RCCEx_PLLSAI2_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026c2:	490d      	ldr	r1, [pc, #52]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026e6:	4904      	ldr	r1, [pc, #16]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800270a:	4b75      	ldr	r3, [pc, #468]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002716:	4b72      	ldr	r3, [pc, #456]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d10d      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
       ||
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800272e:	4b6c      	ldr	r3, [pc, #432]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
       ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d047      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e044      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d018      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0x86>
 8002750:	2b03      	cmp	r3, #3
 8002752:	d825      	bhi.n	80027a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002754:	2b01      	cmp	r3, #1
 8002756:	d002      	beq.n	800275e <RCCEx_PLLSAI1_Config+0x62>
 8002758:	2b02      	cmp	r3, #2
 800275a:	d009      	beq.n	8002770 <RCCEx_PLLSAI1_Config+0x74>
 800275c:	e020      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800275e:	4b60      	ldr	r3, [pc, #384]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11d      	bne.n	80027a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276e:	e01a      	b.n	80027a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002770:	4b5b      	ldr	r3, [pc, #364]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d116      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e013      	b.n	80027aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002782:	4b57      	ldr	r3, [pc, #348]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800278e:	4b54      	ldr	r3, [pc, #336]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800279e:	e006      	b.n	80027ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	e004      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b6:	4b4a      	ldr	r3, [pc, #296]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	430b      	orrs	r3, r1
 80027cc:	4944      	ldr	r1, [pc, #272]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d17d      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027d8:	4b41      	ldr	r3, [pc, #260]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a40      	ldr	r2, [pc, #256]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe fb5a 	bl	8000e9c <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ea:	e009      	b.n	8002800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ec:	f7fe fb56 	bl	8000e9c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	73fb      	strb	r3, [r7, #15]
        break;
 80027fe:	e005      	b.n	800280c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002800:	4b37      	ldr	r3, [pc, #220]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ef      	bne.n	80027ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d160      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002818:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	0912      	lsrs	r2, r2, #4
 8002830:	0452      	lsls	r2, r2, #17
 8002832:	430a      	orrs	r2, r1
 8002834:	492a      	ldr	r1, [pc, #168]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	610b      	str	r3, [r1, #16]
 800283a:	e027      	b.n	800288c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d112      	bne.n	8002868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002842:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800284a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6892      	ldr	r2, [r2, #8]
 8002852:	0211      	lsls	r1, r2, #8
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6912      	ldr	r2, [r2, #16]
 8002858:	0852      	lsrs	r2, r2, #1
 800285a:	3a01      	subs	r2, #1
 800285c:	0552      	lsls	r2, r2, #21
 800285e:	430a      	orrs	r2, r1
 8002860:	491f      	ldr	r1, [pc, #124]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	610b      	str	r3, [r1, #16]
 8002866:	e011      	b.n	800288c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002868:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002870:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6892      	ldr	r2, [r2, #8]
 8002878:	0211      	lsls	r1, r2, #8
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6952      	ldr	r2, [r2, #20]
 800287e:	0852      	lsrs	r2, r2, #1
 8002880:	3a01      	subs	r2, #1
 8002882:	0652      	lsls	r2, r2, #25
 8002884:	430a      	orrs	r2, r1
 8002886:	4916      	ldr	r1, [pc, #88]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800288c:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a13      	ldr	r2, [pc, #76]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe fb00 	bl	8000e9c <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800289e:	e009      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a0:	f7fe fafc 	bl	8000e9c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d902      	bls.n	80028b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	73fb      	strb	r3, [r7, #15]
          break;
 80028b2:	e005      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ef      	beq.n	80028a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	4904      	ldr	r1, [pc, #16]	@ (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028f2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d018      	beq.n	8002930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028fe:	4b67      	ldr	r3, [pc, #412]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d10d      	bne.n	800292a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
       ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002916:	4b61      	ldr	r3, [pc, #388]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
       ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d047      	beq.n	80029ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e044      	b.n	80029ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d018      	beq.n	800296a <RCCEx_PLLSAI2_Config+0x86>
 8002938:	2b03      	cmp	r3, #3
 800293a:	d825      	bhi.n	8002988 <RCCEx_PLLSAI2_Config+0xa4>
 800293c:	2b01      	cmp	r3, #1
 800293e:	d002      	beq.n	8002946 <RCCEx_PLLSAI2_Config+0x62>
 8002940:	2b02      	cmp	r3, #2
 8002942:	d009      	beq.n	8002958 <RCCEx_PLLSAI2_Config+0x74>
 8002944:	e020      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002946:	4b55      	ldr	r3, [pc, #340]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11d      	bne.n	800298e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002956:	e01a      	b.n	800298e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002958:	4b50      	ldr	r3, [pc, #320]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002968:	e013      	b.n	8002992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800296a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002976:	4b49      	ldr	r3, [pc, #292]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002986:	e006      	b.n	8002996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e004      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002996:	bf00      	nop
    }

    if(status == HAL_OK)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800299e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	430b      	orrs	r3, r1
 80029b4:	4939      	ldr	r1, [pc, #228]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d167      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029c0:	4b36      	ldr	r3, [pc, #216]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a35      	ldr	r2, [pc, #212]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fa66 	bl	8000e9c <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029d2:	e009      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029d4:	f7fe fa62 	bl	8000e9c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d902      	bls.n	80029e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	73fb      	strb	r3, [r7, #15]
        break;
 80029e6:	e005      	b.n	80029f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029e8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ef      	bne.n	80029d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d14a      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a00:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	0211      	lsls	r1, r2, #8
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	0912      	lsrs	r2, r2, #4
 8002a18:	0452      	lsls	r2, r2, #17
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	491f      	ldr	r1, [pc, #124]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	614b      	str	r3, [r1, #20]
 8002a22:	e011      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a24:	4b1d      	ldr	r3, [pc, #116]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6892      	ldr	r2, [r2, #8]
 8002a34:	0211      	lsls	r1, r2, #8
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6912      	ldr	r2, [r2, #16]
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0652      	lsls	r2, r2, #25
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4916      	ldr	r1, [pc, #88]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a48:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe fa22 	bl	8000e9c <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a5c:	f7fe fa1e 	bl	8000e9c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ef      	beq.n	8002a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4904      	ldr	r1, [pc, #16]	@ (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e054      	b.n	8002b5c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d111      	bne.n	8002ae2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fc36 	bl	8003338 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a23      	ldr	r2, [pc, #140]	@ (8002b64 <HAL_TIM_Base_Init+0xc4>)
 8002ad8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f000 fb79 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08002b69 	.word	0x08002b69

08002b68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d001      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04f      	b.n	8002c34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbe:	d018      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	@ (8002c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d115      	bne.n	8002c1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d015      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0a:	d011      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	e008      	b.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e000      	b.n	8002c32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40000c00 	.word	0x40000c00
 8002c50:	40013400 	.word	0x40013400
 8002c54:	40014000 	.word	0x40014000
 8002c58:	00010007 	.word	0x00010007

08002c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d026      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d021      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0202 	mvn.w	r2, #2
 8002c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
 8002cb0:	e009      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d026      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d021      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0204 	mvn.w	r2, #4
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
 8002d08:	e009      	b.n	8002d1e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d026      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d021      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0208 	mvn.w	r2, #8
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e009      	b.n	8002d76 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d026      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d021      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0210 	mvn.w	r2, #16
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
 8002db8:	e009      	b.n	8002dce <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00e      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f06f 0220 	mvn.w	r2, #32
 8002e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e12e      	b.n	80031de <HAL_TIM_RegisterCallback+0x27a>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	f040 80c1 	bne.w	8003110 <HAL_TIM_RegisterCallback+0x1ac>
  {
    switch (CallbackID)
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	2b1b      	cmp	r3, #27
 8002f92:	f200 80ba 	bhi.w	800310a <HAL_TIM_RegisterCallback+0x1a6>
 8002f96:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <HAL_TIM_RegisterCallback+0x38>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	0800300d 	.word	0x0800300d
 8002fa0:	08003015 	.word	0x08003015
 8002fa4:	0800301d 	.word	0x0800301d
 8002fa8:	08003025 	.word	0x08003025
 8002fac:	0800302d 	.word	0x0800302d
 8002fb0:	08003035 	.word	0x08003035
 8002fb4:	0800303d 	.word	0x0800303d
 8002fb8:	08003045 	.word	0x08003045
 8002fbc:	0800304d 	.word	0x0800304d
 8002fc0:	08003055 	.word	0x08003055
 8002fc4:	0800305d 	.word	0x0800305d
 8002fc8:	08003065 	.word	0x08003065
 8002fcc:	0800306d 	.word	0x0800306d
 8002fd0:	08003075 	.word	0x08003075
 8002fd4:	0800307f 	.word	0x0800307f
 8002fd8:	08003089 	.word	0x08003089
 8002fdc:	08003093 	.word	0x08003093
 8002fe0:	0800309d 	.word	0x0800309d
 8002fe4:	080030a7 	.word	0x080030a7
 8002fe8:	080030b1 	.word	0x080030b1
 8002fec:	080030bb 	.word	0x080030bb
 8002ff0:	080030c5 	.word	0x080030c5
 8002ff4:	080030cf 	.word	0x080030cf
 8002ff8:	080030d9 	.word	0x080030d9
 8002ffc:	080030e3 	.word	0x080030e3
 8003000:	080030ed 	.word	0x080030ed
 8003004:	080030f7 	.word	0x080030f7
 8003008:	08003101 	.word	0x08003101
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003012:	e0e3      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800301a:	e0df      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003022:	e0db      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800302a:	e0d7      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003032:	e0d3      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800303a:	e0cf      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003042:	e0cb      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800304a:	e0c7      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003052:	e0c3      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800305a:	e0bf      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003062:	e0bb      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800306a:	e0b7      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003072:	e0b3      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800307c:	e0ae      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8003086:	e0a9      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003090:	e0a4      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800309a:	e09f      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80030a4:	e09a      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80030ae:	e095      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80030b8:	e090      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80030c2:	e08b      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80030cc:	e086      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80030d6:	e081      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80030e0:	e07c      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80030ea:	e077      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80030f4:	e072      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80030fe:	e06d      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003108:	e068      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
        break;
 800310e:	e065      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d15d      	bne.n	80031d8 <HAL_TIM_RegisterCallback+0x274>
  {
    switch (CallbackID)
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	2b0d      	cmp	r3, #13
 8003120:	d857      	bhi.n	80031d2 <HAL_TIM_RegisterCallback+0x26e>
 8003122:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <HAL_TIM_RegisterCallback+0x1c4>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	08003161 	.word	0x08003161
 800312c:	08003169 	.word	0x08003169
 8003130:	08003171 	.word	0x08003171
 8003134:	08003179 	.word	0x08003179
 8003138:	08003181 	.word	0x08003181
 800313c:	08003189 	.word	0x08003189
 8003140:	08003191 	.word	0x08003191
 8003144:	08003199 	.word	0x08003199
 8003148:	080031a1 	.word	0x080031a1
 800314c:	080031a9 	.word	0x080031a9
 8003150:	080031b1 	.word	0x080031b1
 8003154:	080031b9 	.word	0x080031b9
 8003158:	080031c1 	.word	0x080031c1
 800315c:	080031c9 	.word	0x080031c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003166:	e039      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800316e:	e035      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003176:	e031      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800317e:	e02d      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003186:	e029      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800318e:	e025      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003196:	e021      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800319e:	e01d      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80031a6:	e019      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80031ae:	e015      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80031b6:	e011      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80031be:	e00d      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80031c6:	e009      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80031d0:	e004      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
        break;
 80031d6:	e001      	b.n	80031dc <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a46      	ldr	r2, [pc, #280]	@ (8003318 <TIM_Base_SetConfig+0x12c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d00f      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a43      	ldr	r2, [pc, #268]	@ (800331c <TIM_Base_SetConfig+0x130>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a42      	ldr	r2, [pc, #264]	@ (8003320 <TIM_Base_SetConfig+0x134>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a41      	ldr	r2, [pc, #260]	@ (8003324 <TIM_Base_SetConfig+0x138>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a40      	ldr	r2, [pc, #256]	@ (8003328 <TIM_Base_SetConfig+0x13c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a35      	ldr	r2, [pc, #212]	@ (8003318 <TIM_Base_SetConfig+0x12c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01f      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324c:	d01b      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a32      	ldr	r2, [pc, #200]	@ (800331c <TIM_Base_SetConfig+0x130>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d017      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a31      	ldr	r2, [pc, #196]	@ (8003320 <TIM_Base_SetConfig+0x134>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a30      	ldr	r2, [pc, #192]	@ (8003324 <TIM_Base_SetConfig+0x138>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00f      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2f      	ldr	r2, [pc, #188]	@ (8003328 <TIM_Base_SetConfig+0x13c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00b      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2e      	ldr	r2, [pc, #184]	@ (800332c <TIM_Base_SetConfig+0x140>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2d      	ldr	r2, [pc, #180]	@ (8003330 <TIM_Base_SetConfig+0x144>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <TIM_Base_SetConfig+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2c      	ldr	r2, [pc, #176]	@ (8003334 <TIM_Base_SetConfig+0x148>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d108      	bne.n	8003298 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800328c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <TIM_Base_SetConfig+0x12c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00f      	beq.n	80032e4 <TIM_Base_SetConfig+0xf8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a18      	ldr	r2, [pc, #96]	@ (8003328 <TIM_Base_SetConfig+0x13c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0xf8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a17      	ldr	r2, [pc, #92]	@ (800332c <TIM_Base_SetConfig+0x140>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0xf8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a16      	ldr	r2, [pc, #88]	@ (8003330 <TIM_Base_SetConfig+0x144>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0xf8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a15      	ldr	r2, [pc, #84]	@ (8003334 <TIM_Base_SetConfig+0x148>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d103      	bne.n	80032ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f023 0201 	bic.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	611a      	str	r2, [r3, #16]
  }
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800

08003338 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a1e      	ldr	r2, [pc, #120]	@ (80033bc <TIM_ResetCallback+0x84>)
 8003344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <TIM_ResetCallback+0x88>)
 800334c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <TIM_ResetCallback+0x8c>)
 8003354:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a1b      	ldr	r2, [pc, #108]	@ (80033c8 <TIM_ResetCallback+0x90>)
 800335c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1a      	ldr	r2, [pc, #104]	@ (80033cc <TIM_ResetCallback+0x94>)
 8003364:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a19      	ldr	r2, [pc, #100]	@ (80033d0 <TIM_ResetCallback+0x98>)
 800336c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <TIM_ResetCallback+0x9c>)
 8003374:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <TIM_ResetCallback+0xa0>)
 800337c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a16      	ldr	r2, [pc, #88]	@ (80033dc <TIM_ResetCallback+0xa4>)
 8003384:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <TIM_ResetCallback+0xa8>)
 800338c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <TIM_ResetCallback+0xac>)
 8003394:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a13      	ldr	r2, [pc, #76]	@ (80033e8 <TIM_ResetCallback+0xb0>)
 800339c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a12      	ldr	r2, [pc, #72]	@ (80033ec <TIM_ResetCallback+0xb4>)
 80033a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a11      	ldr	r2, [pc, #68]	@ (80033f0 <TIM_ResetCallback+0xb8>)
 80033ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	080007bd 	.word	0x080007bd
 80033c0:	08002eaf 	.word	0x08002eaf
 80033c4:	08002f27 	.word	0x08002f27
 80033c8:	08002f3b 	.word	0x08002f3b
 80033cc:	08002ed7 	.word	0x08002ed7
 80033d0:	08002eeb 	.word	0x08002eeb
 80033d4:	08002ec3 	.word	0x08002ec3
 80033d8:	08002eff 	.word	0x08002eff
 80033dc:	08002f13 	.word	0x08002f13
 80033e0:	08002f4f 	.word	0x08002f4f
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003409 	.word	0x08003409
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	08003431 	.word	0x08003431

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e040      	b.n	80034d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fc66 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	@ 0x24
 8003470:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fb6a 	bl	8003b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f8af 	bl	80035f4 <UART_SetConfig>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e01b      	b.n	80034d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fbe9 	bl	8003ca8 <UART_CheckIdleState>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d177      	bne.n	80035e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_UART_Transmit+0x24>
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e070      	b.n	80035ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2221      	movs	r2, #33	@ 0x21
 8003514:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003516:	f7fd fcc1 	bl	8000e9c <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	88fa      	ldrh	r2, [r7, #6]
 8003520:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003534:	d108      	bne.n	8003548 <HAL_UART_Transmit+0x68>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e003      	b.n	8003550 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003550:	e02f      	b.n	80035b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2180      	movs	r1, #128	@ 0x80
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fc4b 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e03b      	b.n	80035ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003584:	b292      	uxth	r2, r2
 8003586:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	3302      	adds	r3, #2
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	e007      	b.n	80035a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1c9      	bne.n	8003552 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2140      	movs	r1, #64	@ 0x40
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fc15 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e005      	b.n	80035ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3720      	adds	r7, #32
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b08a      	sub	sp, #40	@ 0x28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	431a      	orrs	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4313      	orrs	r3, r2
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4ba4      	ldr	r3, [pc, #656]	@ (80038b4 <UART_SetConfig+0x2c0>)
 8003624:	4013      	ands	r3, r2
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800362c:	430b      	orrs	r3, r1
 800362e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a99      	ldr	r2, [pc, #612]	@ (80038b8 <UART_SetConfig+0x2c4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	4313      	orrs	r3, r2
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a90      	ldr	r2, [pc, #576]	@ (80038bc <UART_SetConfig+0x2c8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d126      	bne.n	80036cc <UART_SetConfig+0xd8>
 800367e:	4b90      	ldr	r3, [pc, #576]	@ (80038c0 <UART_SetConfig+0x2cc>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b03      	cmp	r3, #3
 800368a:	d81b      	bhi.n	80036c4 <UART_SetConfig+0xd0>
 800368c:	a201      	add	r2, pc, #4	@ (adr r2, 8003694 <UART_SetConfig+0xa0>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036b5 	.word	0x080036b5
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036bd 	.word	0x080036bd
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036aa:	e116      	b.n	80038da <UART_SetConfig+0x2e6>
 80036ac:	2302      	movs	r3, #2
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b2:	e112      	b.n	80038da <UART_SetConfig+0x2e6>
 80036b4:	2304      	movs	r3, #4
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ba:	e10e      	b.n	80038da <UART_SetConfig+0x2e6>
 80036bc:	2308      	movs	r3, #8
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c2:	e10a      	b.n	80038da <UART_SetConfig+0x2e6>
 80036c4:	2310      	movs	r3, #16
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ca:	e106      	b.n	80038da <UART_SetConfig+0x2e6>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a7c      	ldr	r2, [pc, #496]	@ (80038c4 <UART_SetConfig+0x2d0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d138      	bne.n	8003748 <UART_SetConfig+0x154>
 80036d6:	4b7a      	ldr	r3, [pc, #488]	@ (80038c0 <UART_SetConfig+0x2cc>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d82d      	bhi.n	8003740 <UART_SetConfig+0x14c>
 80036e4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ec <UART_SetConfig+0xf8>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003741 	.word	0x08003741
 80036f8:	08003741 	.word	0x08003741
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003741 	.word	0x08003741
 8003704:	08003741 	.word	0x08003741
 8003708:	08003741 	.word	0x08003741
 800370c:	08003729 	.word	0x08003729
 8003710:	08003741 	.word	0x08003741
 8003714:	08003741 	.word	0x08003741
 8003718:	08003741 	.word	0x08003741
 800371c:	08003739 	.word	0x08003739
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003726:	e0d8      	b.n	80038da <UART_SetConfig+0x2e6>
 8003728:	2302      	movs	r3, #2
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372e:	e0d4      	b.n	80038da <UART_SetConfig+0x2e6>
 8003730:	2304      	movs	r3, #4
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003736:	e0d0      	b.n	80038da <UART_SetConfig+0x2e6>
 8003738:	2308      	movs	r3, #8
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373e:	e0cc      	b.n	80038da <UART_SetConfig+0x2e6>
 8003740:	2310      	movs	r3, #16
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003746:	e0c8      	b.n	80038da <UART_SetConfig+0x2e6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a5e      	ldr	r2, [pc, #376]	@ (80038c8 <UART_SetConfig+0x2d4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d125      	bne.n	800379e <UART_SetConfig+0x1aa>
 8003752:	4b5b      	ldr	r3, [pc, #364]	@ (80038c0 <UART_SetConfig+0x2cc>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800375c:	2b30      	cmp	r3, #48	@ 0x30
 800375e:	d016      	beq.n	800378e <UART_SetConfig+0x19a>
 8003760:	2b30      	cmp	r3, #48	@ 0x30
 8003762:	d818      	bhi.n	8003796 <UART_SetConfig+0x1a2>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d00a      	beq.n	800377e <UART_SetConfig+0x18a>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d814      	bhi.n	8003796 <UART_SetConfig+0x1a2>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <UART_SetConfig+0x182>
 8003770:	2b10      	cmp	r3, #16
 8003772:	d008      	beq.n	8003786 <UART_SetConfig+0x192>
 8003774:	e00f      	b.n	8003796 <UART_SetConfig+0x1a2>
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377c:	e0ad      	b.n	80038da <UART_SetConfig+0x2e6>
 800377e:	2302      	movs	r3, #2
 8003780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003784:	e0a9      	b.n	80038da <UART_SetConfig+0x2e6>
 8003786:	2304      	movs	r3, #4
 8003788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800378c:	e0a5      	b.n	80038da <UART_SetConfig+0x2e6>
 800378e:	2308      	movs	r3, #8
 8003790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003794:	e0a1      	b.n	80038da <UART_SetConfig+0x2e6>
 8003796:	2310      	movs	r3, #16
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379c:	e09d      	b.n	80038da <UART_SetConfig+0x2e6>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a4a      	ldr	r2, [pc, #296]	@ (80038cc <UART_SetConfig+0x2d8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d125      	bne.n	80037f4 <UART_SetConfig+0x200>
 80037a8:	4b45      	ldr	r3, [pc, #276]	@ (80038c0 <UART_SetConfig+0x2cc>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037b4:	d016      	beq.n	80037e4 <UART_SetConfig+0x1f0>
 80037b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037b8:	d818      	bhi.n	80037ec <UART_SetConfig+0x1f8>
 80037ba:	2b80      	cmp	r3, #128	@ 0x80
 80037bc:	d00a      	beq.n	80037d4 <UART_SetConfig+0x1e0>
 80037be:	2b80      	cmp	r3, #128	@ 0x80
 80037c0:	d814      	bhi.n	80037ec <UART_SetConfig+0x1f8>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <UART_SetConfig+0x1d8>
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d008      	beq.n	80037dc <UART_SetConfig+0x1e8>
 80037ca:	e00f      	b.n	80037ec <UART_SetConfig+0x1f8>
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d2:	e082      	b.n	80038da <UART_SetConfig+0x2e6>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037da:	e07e      	b.n	80038da <UART_SetConfig+0x2e6>
 80037dc:	2304      	movs	r3, #4
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e2:	e07a      	b.n	80038da <UART_SetConfig+0x2e6>
 80037e4:	2308      	movs	r3, #8
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ea:	e076      	b.n	80038da <UART_SetConfig+0x2e6>
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e072      	b.n	80038da <UART_SetConfig+0x2e6>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a35      	ldr	r2, [pc, #212]	@ (80038d0 <UART_SetConfig+0x2dc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d12a      	bne.n	8003854 <UART_SetConfig+0x260>
 80037fe:	4b30      	ldr	r3, [pc, #192]	@ (80038c0 <UART_SetConfig+0x2cc>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800380c:	d01a      	beq.n	8003844 <UART_SetConfig+0x250>
 800380e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003812:	d81b      	bhi.n	800384c <UART_SetConfig+0x258>
 8003814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003818:	d00c      	beq.n	8003834 <UART_SetConfig+0x240>
 800381a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381e:	d815      	bhi.n	800384c <UART_SetConfig+0x258>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <UART_SetConfig+0x238>
 8003824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003828:	d008      	beq.n	800383c <UART_SetConfig+0x248>
 800382a:	e00f      	b.n	800384c <UART_SetConfig+0x258>
 800382c:	2300      	movs	r3, #0
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003832:	e052      	b.n	80038da <UART_SetConfig+0x2e6>
 8003834:	2302      	movs	r3, #2
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800383a:	e04e      	b.n	80038da <UART_SetConfig+0x2e6>
 800383c:	2304      	movs	r3, #4
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003842:	e04a      	b.n	80038da <UART_SetConfig+0x2e6>
 8003844:	2308      	movs	r3, #8
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800384a:	e046      	b.n	80038da <UART_SetConfig+0x2e6>
 800384c:	2310      	movs	r3, #16
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003852:	e042      	b.n	80038da <UART_SetConfig+0x2e6>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <UART_SetConfig+0x2c4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d13a      	bne.n	80038d4 <UART_SetConfig+0x2e0>
 800385e:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <UART_SetConfig+0x2cc>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003864:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003868:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800386c:	d01a      	beq.n	80038a4 <UART_SetConfig+0x2b0>
 800386e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003872:	d81b      	bhi.n	80038ac <UART_SetConfig+0x2b8>
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003878:	d00c      	beq.n	8003894 <UART_SetConfig+0x2a0>
 800387a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387e:	d815      	bhi.n	80038ac <UART_SetConfig+0x2b8>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <UART_SetConfig+0x298>
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003888:	d008      	beq.n	800389c <UART_SetConfig+0x2a8>
 800388a:	e00f      	b.n	80038ac <UART_SetConfig+0x2b8>
 800388c:	2300      	movs	r3, #0
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003892:	e022      	b.n	80038da <UART_SetConfig+0x2e6>
 8003894:	2302      	movs	r3, #2
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800389a:	e01e      	b.n	80038da <UART_SetConfig+0x2e6>
 800389c:	2304      	movs	r3, #4
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a2:	e01a      	b.n	80038da <UART_SetConfig+0x2e6>
 80038a4:	2308      	movs	r3, #8
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038aa:	e016      	b.n	80038da <UART_SetConfig+0x2e6>
 80038ac:	2310      	movs	r3, #16
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b2:	e012      	b.n	80038da <UART_SetConfig+0x2e6>
 80038b4:	efff69f3 	.word	0xefff69f3
 80038b8:	40008000 	.word	0x40008000
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40004400 	.word	0x40004400
 80038c8:	40004800 	.word	0x40004800
 80038cc:	40004c00 	.word	0x40004c00
 80038d0:	40005000 	.word	0x40005000
 80038d4:	2310      	movs	r3, #16
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a9f      	ldr	r2, [pc, #636]	@ (8003b5c <UART_SetConfig+0x568>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d17a      	bne.n	80039da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d824      	bhi.n	8003936 <UART_SetConfig+0x342>
 80038ec:	a201      	add	r2, pc, #4	@ (adr r2, 80038f4 <UART_SetConfig+0x300>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003937 	.word	0x08003937
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003937 	.word	0x08003937
 8003904:	08003927 	.word	0x08003927
 8003908:	08003937 	.word	0x08003937
 800390c:	08003937 	.word	0x08003937
 8003910:	08003937 	.word	0x08003937
 8003914:	0800392f 	.word	0x0800392f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7fe fb48 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 800391c:	61f8      	str	r0, [r7, #28]
        break;
 800391e:	e010      	b.n	8003942 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003920:	4b8f      	ldr	r3, [pc, #572]	@ (8003b60 <UART_SetConfig+0x56c>)
 8003922:	61fb      	str	r3, [r7, #28]
        break;
 8003924:	e00d      	b.n	8003942 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003926:	f7fe faa9 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 800392a:	61f8      	str	r0, [r7, #28]
        break;
 800392c:	e009      	b.n	8003942 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003932:	61fb      	str	r3, [r7, #28]
        break;
 8003934:	e005      	b.n	8003942 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80fb 	beq.w	8003b40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	429a      	cmp	r2, r3
 8003958:	d305      	bcc.n	8003966 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	429a      	cmp	r2, r3
 8003964:	d903      	bls.n	800396e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800396c:	e0e8      	b.n	8003b40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2200      	movs	r2, #0
 8003972:	461c      	mov	r4, r3
 8003974:	4615      	mov	r5, r2
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	022b      	lsls	r3, r5, #8
 8003980:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003984:	0222      	lsls	r2, r4, #8
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	6849      	ldr	r1, [r1, #4]
 800398a:	0849      	lsrs	r1, r1, #1
 800398c:	2000      	movs	r0, #0
 800398e:	4688      	mov	r8, r1
 8003990:	4681      	mov	r9, r0
 8003992:	eb12 0a08 	adds.w	sl, r2, r8
 8003996:	eb43 0b09 	adc.w	fp, r3, r9
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039a8:	4650      	mov	r0, sl
 80039aa:	4659      	mov	r1, fp
 80039ac:	f7fc fc60 	bl	8000270 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039be:	d308      	bcc.n	80039d2 <UART_SetConfig+0x3de>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039c6:	d204      	bcs.n	80039d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	e0b6      	b.n	8003b40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039d8:	e0b2      	b.n	8003b40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e2:	d15e      	bne.n	8003aa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d828      	bhi.n	8003a3e <UART_SetConfig+0x44a>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <UART_SetConfig+0x400>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a19 	.word	0x08003a19
 80039f8:	08003a21 	.word	0x08003a21
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003a3f 	.word	0x08003a3f
 8003a04:	08003a2f 	.word	0x08003a2f
 8003a08:	08003a3f 	.word	0x08003a3f
 8003a0c:	08003a3f 	.word	0x08003a3f
 8003a10:	08003a3f 	.word	0x08003a3f
 8003a14:	08003a37 	.word	0x08003a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7fe fac8 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003a1c:	61f8      	str	r0, [r7, #28]
        break;
 8003a1e:	e014      	b.n	8003a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7fe fada 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8003a24:	61f8      	str	r0, [r7, #28]
        break;
 8003a26:	e010      	b.n	8003a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a28:	4b4d      	ldr	r3, [pc, #308]	@ (8003b60 <UART_SetConfig+0x56c>)
 8003a2a:	61fb      	str	r3, [r7, #28]
        break;
 8003a2c:	e00d      	b.n	8003a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2e:	f7fe fa25 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8003a32:	61f8      	str	r0, [r7, #28]
        break;
 8003a34:	e009      	b.n	8003a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a3a:	61fb      	str	r3, [r7, #28]
        break;
 8003a3c:	e005      	b.n	8003a4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d077      	beq.n	8003b40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005a      	lsls	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	441a      	add	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b0f      	cmp	r3, #15
 8003a6a:	d916      	bls.n	8003a9a <UART_SetConfig+0x4a6>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a72:	d212      	bcs.n	8003a9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f023 030f 	bic.w	r3, r3, #15
 8003a7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	8afb      	ldrh	r3, [r7, #22]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	8afa      	ldrh	r2, [r7, #22]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e052      	b.n	8003b40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003aa0:	e04e      	b.n	8003b40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d827      	bhi.n	8003afa <UART_SetConfig+0x506>
 8003aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <UART_SetConfig+0x4bc>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003add 	.word	0x08003add
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003afb 	.word	0x08003afb
 8003ac0:	08003aeb 	.word	0x08003aeb
 8003ac4:	08003afb 	.word	0x08003afb
 8003ac8:	08003afb 	.word	0x08003afb
 8003acc:	08003afb 	.word	0x08003afb
 8003ad0:	08003af3 	.word	0x08003af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad4:	f7fe fa6a 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003ad8:	61f8      	str	r0, [r7, #28]
        break;
 8003ada:	e014      	b.n	8003b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003adc:	f7fe fa7c 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8003ae0:	61f8      	str	r0, [r7, #28]
        break;
 8003ae2:	e010      	b.n	8003b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <UART_SetConfig+0x56c>)
 8003ae6:	61fb      	str	r3, [r7, #28]
        break;
 8003ae8:	e00d      	b.n	8003b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aea:	f7fe f9c7 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8003aee:	61f8      	str	r0, [r7, #28]
        break;
 8003af0:	e009      	b.n	8003b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af6:	61fb      	str	r3, [r7, #28]
        break;
 8003af8:	e005      	b.n	8003b06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b04:	bf00      	nop
    }

    if (pclk != 0U)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d019      	beq.n	8003b40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	085a      	lsrs	r2, r3, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	d909      	bls.n	8003b3a <UART_SetConfig+0x546>
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2c:	d205      	bcs.n	8003b3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e002      	b.n	8003b40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	@ 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40008000 	.word	0x40008000
 8003b60:	00f42400 	.word	0x00f42400

08003b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01a      	beq.n	8003c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c62:	d10a      	bne.n	8003c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b098      	sub	sp, #96	@ 0x60
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cb8:	f7fd f8f0 	bl	8000e9c <HAL_GetTick>
 8003cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d12e      	bne.n	8003d2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f88c 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e6      	bne.n	8003ce6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e062      	b.n	8003df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d149      	bne.n	8003dcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d40:	2200      	movs	r2, #0
 8003d42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f856 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03c      	beq.n	8003dcc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e6      	bne.n	8003d52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003da4:	61fa      	str	r2, [r7, #28]
 8003da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	617b      	str	r3, [r7, #20]
   return(result);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e011      	b.n	8003df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3758      	adds	r7, #88	@ 0x58
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e08:	e04f      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d04b      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fd f843 	bl	8000e9c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e04e      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d037      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b80      	cmp	r3, #128	@ 0x80
 8003e3e:	d034      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d031      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d110      	bne.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f838 	bl	8003ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2208      	movs	r2, #8
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e029      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e84:	d111      	bne.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f81e 	bl	8003ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d0a0      	beq.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b095      	sub	sp, #84	@ 0x54
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003efa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e6      	bne.n	8003eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d118      	bne.n	8003f7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e6      	bne.n	8003f48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f8e:	bf00      	nop
 8003f90:	3754      	adds	r7, #84	@ 0x54
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f103 0208 	add.w	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f103 0208 	add.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 0208 	add.w	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	601a      	str	r2, [r3, #0]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d103      	bne.n	800405c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e00c      	b.n	8004076 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3308      	adds	r3, #8
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e002      	b.n	800406a <vListInsert+0x2e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	d2f6      	bcs.n	8004064 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6892      	ldr	r2, [r2, #8]
 80040c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6852      	ldr	r2, [r2, #4]
 80040ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d103      	bne.n	80040e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004130:	f001 fd1a 	bl	8005b68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	441a      	add	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	3b01      	subs	r3, #1
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	441a      	add	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	22ff      	movs	r2, #255	@ 0xff
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	22ff      	movs	r2, #255	@ 0xff
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d114      	bne.n	80041b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01a      	beq.n	80041c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3310      	adds	r3, #16
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ffce 	bl	8005134 <xTaskRemoveFromEventList>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d012      	beq.n	80041c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <xQueueGenericReset+0xd0>)
 80041a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	e009      	b.n	80041c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3310      	adds	r3, #16
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fef0 	bl	8003f9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3324      	adds	r3, #36	@ 0x24
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff feeb 	bl	8003f9a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041c4:	f001 fd02 	bl	8005bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041c8:	2301      	movs	r3, #1
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xQueueGenericCreate+0x2c>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	613b      	str	r3, [r7, #16]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3348      	adds	r3, #72	@ 0x48
 8004212:	4618      	mov	r0, r3
 8004214:	f001 fd88 	bl	8005d28 <pvPortMalloc>
 8004218:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d011      	beq.n	8004244 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3348      	adds	r3, #72	@ 0x48
 8004228:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004232:	79fa      	ldrb	r2, [r7, #7]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f805 	bl	800424e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004244:	69bb      	ldr	r3, [r7, #24]
	}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e002      	b.n	8004270 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800427c:	2101      	movs	r1, #1
 800427e:	69b8      	ldr	r0, [r7, #24]
 8004280:	f7ff ff40 	bl	8004104 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08e      	sub	sp, #56	@ 0x38
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800429a:	2300      	movs	r3, #0
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <xQueueGenericSend+0x34>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <xQueueGenericSend+0x42>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <xQueueGenericSend+0x46>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueueGenericSend+0x48>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <xQueueGenericSend+0x64>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSend+0x72>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <xQueueGenericSend+0x76>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericSend+0x78>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <xQueueGenericSend+0x94>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004320:	f001 f8ce 	bl	80054c0 <xTaskGetSchedulerState>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <xQueueGenericSend+0xa4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <xQueueGenericSend+0xa8>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <xQueueGenericSend+0xaa>
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <xQueueGenericSend+0xc6>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	61fb      	str	r3, [r7, #28]
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	e7fd      	b.n	800434e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004352:	f001 fc09 	bl	8005b68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <xQueueGenericSend+0xdc>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d129      	bne.n	80043bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800436e:	f000 f9b7 	bl	80046e0 <prvCopyDataToQueue>
 8004372:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	3324      	adds	r3, #36	@ 0x24
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fed7 	bl	8005134 <xTaskRemoveFromEventList>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d013      	beq.n	80043b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800438c:	4b3f      	ldr	r3, [pc, #252]	@ (800448c <xQueueGenericSend+0x200>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	e00a      	b.n	80043b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800439e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043a4:	4b39      	ldr	r3, [pc, #228]	@ (800448c <xQueueGenericSend+0x200>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043b4:	f001 fc0a 	bl	8005bcc <vPortExitCritical>
				return pdPASS;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e063      	b.n	8004484 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043c2:	f001 fc03 	bl	8005bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e05c      	b.n	8004484 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043d0:	f107 0314 	add.w	r3, r7, #20
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 ff11 	bl	80051fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043da:	2301      	movs	r3, #1
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043de:	f001 fbf5 	bl	8005bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043e2:	f000 fcb7 	bl	8004d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043e6:	f001 fbbf 	bl	8005b68 <vPortEnterCritical>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d103      	bne.n	8004400 <xQueueGenericSend+0x174>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004406:	b25b      	sxtb	r3, r3
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d103      	bne.n	8004416 <xQueueGenericSend+0x18a>
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004416:	f001 fbd9 	bl	8005bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800441a:	1d3a      	adds	r2, r7, #4
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ff00 	bl	8005228 <xTaskCheckForTimeOut>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d124      	bne.n	8004478 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800442e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004430:	f000 fa28 	bl	8004884 <prvIsQueueFull>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	3310      	adds	r3, #16
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fe50 	bl	80050e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800444a:	f000 f9b3 	bl	80047b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800444e:	f000 fc8f 	bl	8004d70 <xTaskResumeAll>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f af7c 	bne.w	8004352 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800445a:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <xQueueGenericSend+0x200>)
 800445c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	e772      	b.n	8004352 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800446c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800446e:	f000 f9a1 	bl	80047b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004472:	f000 fc7d 	bl	8004d70 <xTaskResumeAll>
 8004476:	e76c      	b.n	8004352 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800447a:	f000 f99b 	bl	80047b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800447e:	f000 fc77 	bl	8004d70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004482:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004484:	4618      	mov	r0, r3
 8004486:	3738      	adds	r7, #56	@ 0x38
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	@ 0x38
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	623b      	str	r3, [r7, #32]
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	61fb      	str	r3, [r7, #28]
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044e4:	f000 ffec 	bl	80054c0 <xTaskGetSchedulerState>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <xQueueSemaphoreTake+0x64>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <xQueueSemaphoreTake+0x68>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <xQueueSemaphoreTake+0x6a>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	61bb      	str	r3, [r7, #24]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004516:	f001 fb27 	bl	8005b68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800451a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d024      	beq.n	8004570 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	1e5a      	subs	r2, r3, #1
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004536:	f001 f96f 	bl	8005818 <pvTaskIncrementMutexHeldCount>
 800453a:	4602      	mov	r2, r0
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00f      	beq.n	8004568 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454a:	3310      	adds	r3, #16
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fdf1 	bl	8005134 <xTaskRemoveFromEventList>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004558:	4b54      	ldr	r3, [pc, #336]	@ (80046ac <xQueueSemaphoreTake+0x21c>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004568:	f001 fb30 	bl	8005bcc <vPortExitCritical>
				return pdPASS;
 800456c:	2301      	movs	r3, #1
 800456e:	e098      	b.n	80046a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d112      	bne.n	800459c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	617b      	str	r3, [r7, #20]
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004594:	f001 fb1a 	bl	8005bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004598:	2300      	movs	r3, #0
 800459a:	e082      	b.n	80046a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800459c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fe28 	bl	80051fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b0:	f001 fb0c 	bl	8005bcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045b4:	f000 fbce 	bl	8004d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b8:	f001 fad6 	bl	8005b68 <vPortEnterCritical>
 80045bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d103      	bne.n	80045d2 <xQueueSemaphoreTake+0x142>
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d103      	bne.n	80045e8 <xQueueSemaphoreTake+0x158>
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045e8:	f001 faf0 	bl	8005bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ec:	463a      	mov	r2, r7
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fe17 	bl	8005228 <xTaskCheckForTimeOut>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d132      	bne.n	8004666 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004600:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004602:	f000 f929 	bl	8004858 <prvIsQueueEmpty>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d026      	beq.n	800465a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004614:	f001 faa8 	bl	8005b68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 ff6d 	bl	80054fc <xTaskPriorityInherit>
 8004622:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004624:	f001 fad2 	bl	8005bcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462a:	3324      	adds	r3, #36	@ 0x24
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fd59 	bl	80050e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004638:	f000 f8bc 	bl	80047b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800463c:	f000 fb98 	bl	8004d70 <xTaskResumeAll>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f47f af67 	bne.w	8004516 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004648:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <xQueueSemaphoreTake+0x21c>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	e75d      	b.n	8004516 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800465a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800465c:	f000 f8aa 	bl	80047b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004660:	f000 fb86 	bl	8004d70 <xTaskResumeAll>
 8004664:	e757      	b.n	8004516 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004668:	f000 f8a4 	bl	80047b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800466c:	f000 fb80 	bl	8004d70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004670:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004672:	f000 f8f1 	bl	8004858 <prvIsQueueEmpty>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	f43f af4c 	beq.w	8004516 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004684:	f001 fa70 	bl	8005b68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004688:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800468a:	f000 f811 	bl	80046b0 <prvGetDisinheritPriorityAfterTimeout>
 800468e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f82e 	bl	80056f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800469c:	f001 fa96 	bl	8005bcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3738      	adds	r7, #56	@ 0x38
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1c3 0307 	rsb	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e001      	b.n	80046d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80046d2:	68fb      	ldr	r3, [r7, #12]
	}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10d      	bne.n	800471a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d14d      	bne.n	80047a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 ff6c 	bl	80055e8 <xTaskPriorityDisinherit>
 8004710:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	e043      	b.n	80047a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d119      	bne.n	8004754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6858      	ldr	r0, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	461a      	mov	r2, r3
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	f001 fef6 	bl	800651c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	441a      	add	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	d32b      	bcc.n	80047a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	e026      	b.n	80047a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68d8      	ldr	r0, [r3, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	461a      	mov	r2, r3
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	f001 fedc 	bl	800651c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	425b      	negs	r3, r3
 800476e:	441a      	add	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d207      	bcs.n	8004790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	425b      	negs	r3, r3
 800478a:	441a      	add	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d105      	bne.n	80047a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	3b01      	subs	r3, #1
 80047a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047bc:	f001 f9d4 	bl	8005b68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047c8:	e011      	b.n	80047ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d012      	beq.n	80047f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3324      	adds	r3, #36	@ 0x24
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fcac 	bl	8005134 <xTaskRemoveFromEventList>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047e2:	f000 fd85 	bl	80052f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	dce9      	bgt.n	80047ca <prvUnlockQueue+0x16>
 80047f6:	e000      	b.n	80047fa <prvUnlockQueue+0x46>
					break;
 80047f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	22ff      	movs	r2, #255	@ 0xff
 80047fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004802:	f001 f9e3 	bl	8005bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004806:	f001 f9af 	bl	8005b68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004810:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004812:	e011      	b.n	8004838 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d012      	beq.n	8004842 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3310      	adds	r3, #16
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fc87 	bl	8005134 <xTaskRemoveFromEventList>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800482c:	f000 fd60 	bl	80052f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004830:	7bbb      	ldrb	r3, [r7, #14]
 8004832:	3b01      	subs	r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800483c:	2b00      	cmp	r3, #0
 800483e:	dce9      	bgt.n	8004814 <prvUnlockQueue+0x60>
 8004840:	e000      	b.n	8004844 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004842:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	22ff      	movs	r2, #255	@ 0xff
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800484c:	f001 f9be 	bl	8005bcc <vPortExitCritical>
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004860:	f001 f982 	bl	8005b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800486c:	2301      	movs	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e001      	b.n	8004876 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004876:	f001 f9a9 	bl	8005bcc <vPortExitCritical>

	return xReturn;
 800487a:	68fb      	ldr	r3, [r7, #12]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800488c:	f001 f96c 	bl	8005b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004898:	429a      	cmp	r2, r3
 800489a:	d102      	bne.n	80048a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e001      	b.n	80048a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048a6:	f001 f991 	bl	8005bcc <vPortExitCritical>

	return xReturn;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	@ 0x38
 80048b8:	af04      	add	r7, sp, #16
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	61fb      	str	r3, [r7, #28]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048fe:	23a0      	movs	r3, #160	@ 0xa0
 8004900:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2ba0      	cmp	r3, #160	@ 0xa0
 8004906:	d00b      	beq.n	8004920 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	61bb      	str	r3, [r7, #24]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004920:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01e      	beq.n	8004966 <xTaskCreateStatic+0xb2>
 8004928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01b      	beq.n	8004966 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	2202      	movs	r2, #2
 800493c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004940:	2300      	movs	r3, #0
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	9302      	str	r3, [sp, #8]
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f851 	bl	8004a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800495e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004960:	f000 f8ee 	bl	8004b40 <prvAddNewTaskToReadyList>
 8004964:	e001      	b.n	800496a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800496a:	697b      	ldr	r3, [r7, #20]
	}
 800496c:	4618      	mov	r0, r3
 800496e:	3728      	adds	r7, #40	@ 0x28
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	@ 0x30
 8004978:	af04      	add	r7, sp, #16
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f9cd 	bl	8005d28 <pvPortMalloc>
 800498e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00e      	beq.n	80049b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004996:	20a0      	movs	r0, #160	@ 0xa0
 8004998:	f001 f9c6 	bl	8005d28 <pvPortMalloc>
 800499c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80049aa:	e005      	b.n	80049b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049ac:	6978      	ldr	r0, [r7, #20]
 80049ae:	f001 fa89 	bl	8005ec4 <vPortFree>
 80049b2:	e001      	b.n	80049b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d017      	beq.n	80049ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	2300      	movs	r3, #0
 80049ca:	9303      	str	r3, [sp, #12]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	9302      	str	r3, [sp, #8]
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f80f 	bl	8004a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049e2:	69f8      	ldr	r0, [r7, #28]
 80049e4:	f000 f8ac 	bl	8004b40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049e8:	2301      	movs	r3, #1
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e002      	b.n	80049f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
 80049f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049f4:	69bb      	ldr	r3, [r7, #24]
	}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f023 0307 	bic.w	r3, r3, #7
 8004a26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	617b      	str	r3, [r7, #20]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01f      	beq.n	8004a90 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e012      	b.n	8004a7c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	7819      	ldrb	r1, [r3, #0]
 8004a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	3334      	adds	r3, #52	@ 0x34
 8004a66:	460a      	mov	r2, r1
 8004a68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d006      	beq.n	8004a84 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d9e9      	bls.n	8004a56 <prvInitialiseNewTask+0x56>
 8004a82:	e000      	b.n	8004a86 <prvInitialiseNewTask+0x86>
			{
				break;
 8004a84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a8e:	e003      	b.n	8004a98 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d901      	bls.n	8004aa2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a9e:	2306      	movs	r3, #6
 8004aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fa8e 	bl	8003fda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	3318      	adds	r3, #24
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fa89 	bl	8003fda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004acc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	f1c3 0207 	rsb	r2, r3, #7
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004adc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	334c      	adds	r3, #76	@ 0x4c
 8004af2:	224c      	movs	r2, #76	@ 0x4c
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fc32 	bl	8006360 <memset>
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	4a0d      	ldr	r2, [pc, #52]	@ (8004b34 <prvInitialiseNewTask+0x134>)
 8004b00:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	4a0c      	ldr	r2, [pc, #48]	@ (8004b38 <prvInitialiseNewTask+0x138>)
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b3c <prvInitialiseNewTask+0x13c>)
 8004b0c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	68f9      	ldr	r1, [r7, #12]
 8004b12:	69b8      	ldr	r0, [r7, #24]
 8004b14:	f000 fefa 	bl	800590c <pxPortInitialiseStack>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2a:	bf00      	nop
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	200011a8 	.word	0x200011a8
 8004b38:	20001210 	.word	0x20001210
 8004b3c:	20001278 	.word	0x20001278

08004b40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b48:	f001 f80e 	bl	8005b68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf8 <prvAddNewTaskToReadyList+0xb8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	4a29      	ldr	r2, [pc, #164]	@ (8004bf8 <prvAddNewTaskToReadyList+0xb8>)
 8004b54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b56:	4b29      	ldr	r3, [pc, #164]	@ (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b5e:	4a27      	ldr	r2, [pc, #156]	@ (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b64:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <prvAddNewTaskToReadyList+0xb8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d110      	bne.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b6c:	f000 fbe4 	bl	8005338 <prvInitialiseTaskLists>
 8004b70:	e00d      	b.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b72:	4b23      	ldr	r3, [pc, #140]	@ (8004c00 <prvAddNewTaskToReadyList+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b7a:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d802      	bhi.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b88:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a1b      	ldr	r2, [pc, #108]	@ (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <prvAddNewTaskToReadyList+0xcc>)
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7ff fa17 	bl	8003ff4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bc6:	f001 f801 	bl	8005bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <prvAddNewTaskToReadyList+0xc0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00e      	beq.n	8004bf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d207      	bcs.n	8004bf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <prvAddNewTaskToReadyList+0xd0>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000590 	.word	0x20000590
 8004bfc:	20000490 	.word	0x20000490
 8004c00:	2000059c 	.word	0x2000059c
 8004c04:	200005ac 	.word	0x200005ac
 8004c08:	20000598 	.word	0x20000598
 8004c0c:	20000494 	.word	0x20000494
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d018      	beq.n	8004c58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c26:	4b14      	ldr	r3, [pc, #80]	@ (8004c78 <vTaskDelay+0x64>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <vTaskDelay+0x32>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	60bb      	str	r3, [r7, #8]
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c46:	f000 f885 	bl	8004d54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fdf7 	bl	8005840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c52:	f000 f88d 	bl	8004d70 <xTaskResumeAll>
 8004c56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c5e:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <vTaskDelay+0x68>)
 8004c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200005b8 	.word	0x200005b8
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c8e:	463a      	mov	r2, r7
 8004c90:	1d39      	adds	r1, r7, #4
 8004c92:	f107 0308 	add.w	r3, r7, #8
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb fccc 	bl	8000634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	9202      	str	r2, [sp, #8]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	460a      	mov	r2, r1
 8004cae:	4921      	ldr	r1, [pc, #132]	@ (8004d34 <vTaskStartScheduler+0xb4>)
 8004cb0:	4821      	ldr	r0, [pc, #132]	@ (8004d38 <vTaskStartScheduler+0xb8>)
 8004cb2:	f7ff fdff 	bl	80048b4 <xTaskCreateStatic>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4a20      	ldr	r2, [pc, #128]	@ (8004d3c <vTaskStartScheduler+0xbc>)
 8004cba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d3c <vTaskStartScheduler+0xbc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e001      	b.n	8004cce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d11b      	bne.n	8004d0c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	613b      	str	r3, [r7, #16]
}
 8004ce6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <vTaskStartScheduler+0xc0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	334c      	adds	r3, #76	@ 0x4c
 8004cee:	4a15      	ldr	r2, [pc, #84]	@ (8004d44 <vTaskStartScheduler+0xc4>)
 8004cf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <vTaskStartScheduler+0xc8>)
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cfa:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <vTaskStartScheduler+0xcc>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d00:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <vTaskStartScheduler+0xd0>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d06:	f000 fe8b 	bl	8005a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d0a:	e00f      	b.n	8004d2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d10b      	bne.n	8004d2c <vTaskStartScheduler+0xac>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60fb      	str	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <vTaskStartScheduler+0xa8>
}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	08006c80 	.word	0x08006c80
 8004d38:	08005309 	.word	0x08005309
 8004d3c:	200005b4 	.word	0x200005b4
 8004d40:	20000490 	.word	0x20000490
 8004d44:	20000018 	.word	0x20000018
 8004d48:	200005b0 	.word	0x200005b0
 8004d4c:	2000059c 	.word	0x2000059c
 8004d50:	20000594 	.word	0x20000594

08004d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d58:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <vTaskSuspendAll+0x18>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	4a03      	ldr	r2, [pc, #12]	@ (8004d6c <vTaskSuspendAll+0x18>)
 8004d60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	200005b8 	.word	0x200005b8

08004d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d7e:	4b42      	ldr	r3, [pc, #264]	@ (8004e88 <xTaskResumeAll+0x118>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <xTaskResumeAll+0x2e>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	603b      	str	r3, [r7, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	e7fd      	b.n	8004d9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d9e:	f000 fee3 	bl	8005b68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004da2:	4b39      	ldr	r3, [pc, #228]	@ (8004e88 <xTaskResumeAll+0x118>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4a37      	ldr	r2, [pc, #220]	@ (8004e88 <xTaskResumeAll+0x118>)
 8004daa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dac:	4b36      	ldr	r3, [pc, #216]	@ (8004e88 <xTaskResumeAll+0x118>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d161      	bne.n	8004e78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004db4:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <xTaskResumeAll+0x11c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d05d      	beq.n	8004e78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dbc:	e02e      	b.n	8004e1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dbe:	4b34      	ldr	r3, [pc, #208]	@ (8004e90 <xTaskResumeAll+0x120>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3318      	adds	r3, #24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff f96f 	bl	80040ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff f96a 	bl	80040ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	2201      	movs	r2, #1
 8004de0:	409a      	lsls	r2, r3
 8004de2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e94 <xTaskResumeAll+0x124>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	4a2a      	ldr	r2, [pc, #168]	@ (8004e94 <xTaskResumeAll+0x124>)
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4a27      	ldr	r2, [pc, #156]	@ (8004e98 <xTaskResumeAll+0x128>)
 8004dfa:	441a      	add	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7ff f8f6 	bl	8003ff4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0c:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <xTaskResumeAll+0x12c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e16:	4b22      	ldr	r3, [pc, #136]	@ (8004ea0 <xTaskResumeAll+0x130>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e90 <xTaskResumeAll+0x120>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1cc      	bne.n	8004dbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e2a:	f000 fb29 	bl	8005480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <xTaskResumeAll+0x134>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d010      	beq.n	8004e5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e3a:	f000 f837 	bl	8004eac <xTaskIncrementTick>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e44:	4b16      	ldr	r3, [pc, #88]	@ (8004ea0 <xTaskResumeAll+0x130>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f1      	bne.n	8004e3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e56:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <xTaskResumeAll+0x134>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <xTaskResumeAll+0x130>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <xTaskResumeAll+0x138>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e78:	f000 fea8 	bl	8005bcc <vPortExitCritical>

	return xAlreadyYielded;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200005b8 	.word	0x200005b8
 8004e8c:	20000590 	.word	0x20000590
 8004e90:	20000550 	.word	0x20000550
 8004e94:	20000598 	.word	0x20000598
 8004e98:	20000494 	.word	0x20000494
 8004e9c:	20000490 	.word	0x20000490
 8004ea0:	200005a4 	.word	0x200005a4
 8004ea4:	200005a0 	.word	0x200005a0
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff4 <xTaskIncrementTick+0x148>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f040 808f 	bne.w	8004fde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff8 <xTaskIncrementTick+0x14c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ff8 <xTaskIncrementTick+0x14c>)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d121      	bne.n	8004f18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ed4:	4b49      	ldr	r3, [pc, #292]	@ (8004ffc <xTaskIncrementTick+0x150>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	603b      	str	r3, [r7, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <xTaskIncrementTick+0x46>
 8004ef6:	4b41      	ldr	r3, [pc, #260]	@ (8004ffc <xTaskIncrementTick+0x150>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	4b40      	ldr	r3, [pc, #256]	@ (8005000 <xTaskIncrementTick+0x154>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a3e      	ldr	r2, [pc, #248]	@ (8004ffc <xTaskIncrementTick+0x150>)
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4a3e      	ldr	r2, [pc, #248]	@ (8005000 <xTaskIncrementTick+0x154>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005004 <xTaskIncrementTick+0x158>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	4a3c      	ldr	r2, [pc, #240]	@ (8005004 <xTaskIncrementTick+0x158>)
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	f000 fab4 	bl	8005480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f18:	4b3b      	ldr	r3, [pc, #236]	@ (8005008 <xTaskIncrementTick+0x15c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d348      	bcc.n	8004fb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f22:	4b36      	ldr	r3, [pc, #216]	@ (8004ffc <xTaskIncrementTick+0x150>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2c:	4b36      	ldr	r3, [pc, #216]	@ (8005008 <xTaskIncrementTick+0x15c>)
 8004f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f32:	601a      	str	r2, [r3, #0]
					break;
 8004f34:	e03e      	b.n	8004fb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f36:	4b31      	ldr	r3, [pc, #196]	@ (8004ffc <xTaskIncrementTick+0x150>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d203      	bcs.n	8004f56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005008 <xTaskIncrementTick+0x15c>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f54:	e02e      	b.n	8004fb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff f8a7 	bl	80040ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3318      	adds	r3, #24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f89e 	bl	80040ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	2201      	movs	r2, #1
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	4b24      	ldr	r3, [pc, #144]	@ (800500c <xTaskIncrementTick+0x160>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	4a22      	ldr	r2, [pc, #136]	@ (800500c <xTaskIncrementTick+0x160>)
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4a1f      	ldr	r2, [pc, #124]	@ (8005010 <xTaskIncrementTick+0x164>)
 8004f92:	441a      	add	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7ff f82a 	bl	8003ff4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8005014 <xTaskIncrementTick+0x168>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3b9      	bcc.n	8004f22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb2:	e7b6      	b.n	8004f22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fb4:	4b17      	ldr	r3, [pc, #92]	@ (8005014 <xTaskIncrementTick+0x168>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	4915      	ldr	r1, [pc, #84]	@ (8005010 <xTaskIncrementTick+0x164>)
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d901      	bls.n	8004fd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fd0:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <xTaskIncrementTick+0x16c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e004      	b.n	8004fe8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fde:	4b0f      	ldr	r3, [pc, #60]	@ (800501c <xTaskIncrementTick+0x170>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800501c <xTaskIncrementTick+0x170>)
 8004fe6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fe8:	697b      	ldr	r3, [r7, #20]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	200005b8 	.word	0x200005b8
 8004ff8:	20000594 	.word	0x20000594
 8004ffc:	20000548 	.word	0x20000548
 8005000:	2000054c 	.word	0x2000054c
 8005004:	200005a8 	.word	0x200005a8
 8005008:	200005b0 	.word	0x200005b0
 800500c:	20000598 	.word	0x20000598
 8005010:	20000494 	.word	0x20000494
 8005014:	20000490 	.word	0x20000490
 8005018:	200005a4 	.word	0x200005a4
 800501c:	200005a0 	.word	0x200005a0

08005020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005026:	4b2a      	ldr	r3, [pc, #168]	@ (80050d0 <vTaskSwitchContext+0xb0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800502e:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <vTaskSwitchContext+0xb4>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005034:	e045      	b.n	80050c2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005036:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <vTaskSwitchContext+0xb4>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503c:	4b26      	ldr	r3, [pc, #152]	@ (80050d8 <vTaskSwitchContext+0xb8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800504a:	7afb      	ldrb	r3, [r7, #11]
 800504c:	f1c3 031f 	rsb	r3, r3, #31
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	4922      	ldr	r1, [pc, #136]	@ (80050dc <vTaskSwitchContext+0xbc>)
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	607b      	str	r3, [r7, #4]
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	e7fd      	b.n	800507a <vTaskSwitchContext+0x5a>
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <vTaskSwitchContext+0xbc>)
 800508a:	4413      	add	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3308      	adds	r3, #8
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d104      	bne.n	80050ae <vTaskSwitchContext+0x8e>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <vTaskSwitchContext+0xc0>)
 80050b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050b8:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <vTaskSwitchContext+0xc0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	334c      	adds	r3, #76	@ 0x4c
 80050be:	4a09      	ldr	r2, [pc, #36]	@ (80050e4 <vTaskSwitchContext+0xc4>)
 80050c0:	6013      	str	r3, [r2, #0]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	200005b8 	.word	0x200005b8
 80050d4:	200005a4 	.word	0x200005a4
 80050d8:	20000598 	.word	0x20000598
 80050dc:	20000494 	.word	0x20000494
 80050e0:	20000490 	.word	0x20000490
 80050e4:	20000018 	.word	0x20000018

080050e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <vTaskPlaceOnEventList+0x48>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3318      	adds	r3, #24
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fe ff8f 	bl	800403c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800511e:	2101      	movs	r1, #1
 8005120:	6838      	ldr	r0, [r7, #0]
 8005122:	f000 fb8d 	bl	8005840 <prvAddCurrentTaskToDelayedList>
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000490 	.word	0x20000490

08005134 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	60fb      	str	r3, [r7, #12]
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	e7fd      	b.n	800515e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3318      	adds	r3, #24
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe ffa1 	bl	80040ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516c:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <xTaskRemoveFromEventList+0xb0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11c      	bne.n	80051ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe ff98 	bl	80040ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	2201      	movs	r2, #1
 8005184:	409a      	lsls	r2, r3
 8005186:	4b18      	ldr	r3, [pc, #96]	@ (80051e8 <xTaskRemoveFromEventList+0xb4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	4a16      	ldr	r2, [pc, #88]	@ (80051e8 <xTaskRemoveFromEventList+0xb4>)
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4a13      	ldr	r2, [pc, #76]	@ (80051ec <xTaskRemoveFromEventList+0xb8>)
 800519e:	441a      	add	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f7fe ff24 	bl	8003ff4 <vListInsertEnd>
 80051ac:	e005      	b.n	80051ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3318      	adds	r3, #24
 80051b2:	4619      	mov	r1, r3
 80051b4:	480e      	ldr	r0, [pc, #56]	@ (80051f0 <xTaskRemoveFromEventList+0xbc>)
 80051b6:	f7fe ff1d 	bl	8003ff4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <xTaskRemoveFromEventList+0xc0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d905      	bls.n	80051d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051cc:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <xTaskRemoveFromEventList+0xc4>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e001      	b.n	80051d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051d8:	697b      	ldr	r3, [r7, #20]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	200005b8 	.word	0x200005b8
 80051e8:	20000598 	.word	0x20000598
 80051ec:	20000494 	.word	0x20000494
 80051f0:	20000550 	.word	0x20000550
 80051f4:	20000490 	.word	0x20000490
 80051f8:	200005a4 	.word	0x200005a4

080051fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <vTaskInternalSetTimeOutState+0x24>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800520c:	4b05      	ldr	r3, [pc, #20]	@ (8005224 <vTaskInternalSetTimeOutState+0x28>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	605a      	str	r2, [r3, #4]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	200005a8 	.word	0x200005a8
 8005224:	20000594 	.word	0x20000594

08005228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	613b      	str	r3, [r7, #16]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	60fb      	str	r3, [r7, #12]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800526e:	f000 fc7b 	bl	8005b68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005272:	4b1d      	ldr	r3, [pc, #116]	@ (80052e8 <xTaskCheckForTimeOut+0xc0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d102      	bne.n	8005292 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e023      	b.n	80052da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b15      	ldr	r3, [pc, #84]	@ (80052ec <xTaskCheckForTimeOut+0xc4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d007      	beq.n	80052ae <xTaskCheckForTimeOut+0x86>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d302      	bcc.n	80052ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e015      	b.n	80052da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d20b      	bcs.n	80052d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff ff99 	bl	80051fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	e004      	b.n	80052da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052da:	f000 fc77 	bl	8005bcc <vPortExitCritical>

	return xReturn;
 80052de:	69fb      	ldr	r3, [r7, #28]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000594 	.word	0x20000594
 80052ec:	200005a8 	.word	0x200005a8

080052f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052f4:	4b03      	ldr	r3, [pc, #12]	@ (8005304 <vTaskMissedYield+0x14>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
}
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	200005a4 	.word	0x200005a4

08005308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005310:	f000 f852 	bl	80053b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005314:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <prvIdleTask+0x28>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d9f9      	bls.n	8005310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800531c:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <prvIdleTask+0x2c>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800532c:	e7f0      	b.n	8005310 <prvIdleTask+0x8>
 800532e:	bf00      	nop
 8005330:	20000494 	.word	0x20000494
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	e00c      	b.n	800535e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <prvInitialiseTaskLists+0x60>)
 8005350:	4413      	add	r3, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fe21 	bl	8003f9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3301      	adds	r3, #1
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b06      	cmp	r3, #6
 8005362:	d9ef      	bls.n	8005344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005364:	480d      	ldr	r0, [pc, #52]	@ (800539c <prvInitialiseTaskLists+0x64>)
 8005366:	f7fe fe18 	bl	8003f9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800536a:	480d      	ldr	r0, [pc, #52]	@ (80053a0 <prvInitialiseTaskLists+0x68>)
 800536c:	f7fe fe15 	bl	8003f9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005370:	480c      	ldr	r0, [pc, #48]	@ (80053a4 <prvInitialiseTaskLists+0x6c>)
 8005372:	f7fe fe12 	bl	8003f9a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005376:	480c      	ldr	r0, [pc, #48]	@ (80053a8 <prvInitialiseTaskLists+0x70>)
 8005378:	f7fe fe0f 	bl	8003f9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800537c:	480b      	ldr	r0, [pc, #44]	@ (80053ac <prvInitialiseTaskLists+0x74>)
 800537e:	f7fe fe0c 	bl	8003f9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005382:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <prvInitialiseTaskLists+0x78>)
 8005384:	4a05      	ldr	r2, [pc, #20]	@ (800539c <prvInitialiseTaskLists+0x64>)
 8005386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005388:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <prvInitialiseTaskLists+0x7c>)
 800538a:	4a05      	ldr	r2, [pc, #20]	@ (80053a0 <prvInitialiseTaskLists+0x68>)
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000494 	.word	0x20000494
 800539c:	20000520 	.word	0x20000520
 80053a0:	20000534 	.word	0x20000534
 80053a4:	20000550 	.word	0x20000550
 80053a8:	20000564 	.word	0x20000564
 80053ac:	2000057c 	.word	0x2000057c
 80053b0:	20000548 	.word	0x20000548
 80053b4:	2000054c 	.word	0x2000054c

080053b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053be:	e019      	b.n	80053f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053c0:	f000 fbd2 	bl	8005b68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c4:	4b10      	ldr	r3, [pc, #64]	@ (8005408 <prvCheckTasksWaitingTermination+0x50>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fe6c 	bl	80040ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <prvCheckTasksWaitingTermination+0x54>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3b01      	subs	r3, #1
 80053dc:	4a0b      	ldr	r2, [pc, #44]	@ (800540c <prvCheckTasksWaitingTermination+0x54>)
 80053de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <prvCheckTasksWaitingTermination+0x58>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <prvCheckTasksWaitingTermination+0x58>)
 80053e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053ea:	f000 fbef 	bl	8005bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f810 	bl	8005414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053f4:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <prvCheckTasksWaitingTermination+0x58>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e1      	bne.n	80053c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000564 	.word	0x20000564
 800540c:	20000590 	.word	0x20000590
 8005410:	20000578 	.word	0x20000578

08005414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	334c      	adds	r3, #76	@ 0x4c
 8005420:	4618      	mov	r0, r3
 8005422:	f000 ffd5 	bl	80063d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fd45 	bl	8005ec4 <vPortFree>
				vPortFree( pxTCB );
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fd42 	bl	8005ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005440:	e019      	b.n	8005476 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005448:	2b01      	cmp	r3, #1
 800544a:	d103      	bne.n	8005454 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fd39 	bl	8005ec4 <vPortFree>
	}
 8005452:	e010      	b.n	8005476 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800545a:	2b02      	cmp	r3, #2
 800545c:	d00b      	beq.n	8005476 <prvDeleteTCB+0x62>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60fb      	str	r3, [r7, #12]
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	e7fd      	b.n	8005472 <prvDeleteTCB+0x5e>
	}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005486:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <prvResetNextTaskUnblockTime+0x38>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005490:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <prvResetNextTaskUnblockTime+0x3c>)
 8005492:	f04f 32ff 	mov.w	r2, #4294967295
 8005496:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005498:	e008      	b.n	80054ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549a:	4b07      	ldr	r3, [pc, #28]	@ (80054b8 <prvResetNextTaskUnblockTime+0x38>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4a04      	ldr	r2, [pc, #16]	@ (80054bc <prvResetNextTaskUnblockTime+0x3c>)
 80054aa:	6013      	str	r3, [r2, #0]
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	20000548 	.word	0x20000548
 80054bc:	200005b0 	.word	0x200005b0

080054c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054c6:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <xTaskGetSchedulerState+0x34>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054ce:	2301      	movs	r3, #1
 80054d0:	607b      	str	r3, [r7, #4]
 80054d2:	e008      	b.n	80054e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d4:	4b08      	ldr	r3, [pc, #32]	@ (80054f8 <xTaskGetSchedulerState+0x38>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054dc:	2302      	movs	r3, #2
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	e001      	b.n	80054e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054e6:	687b      	ldr	r3, [r7, #4]
	}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	2000059c 	.word	0x2000059c
 80054f8:	200005b8 	.word	0x200005b8

080054fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d05e      	beq.n	80055d0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005516:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <xTaskPriorityInherit+0xe0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	429a      	cmp	r2, r3
 800551e:	d24e      	bcs.n	80055be <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	db06      	blt.n	8005536 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005528:	4b2c      	ldr	r3, [pc, #176]	@ (80055dc <xTaskPriorityInherit+0xe0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	f1c3 0207 	rsb	r2, r3, #7
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6959      	ldr	r1, [r3, #20]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <xTaskPriorityInherit+0xe4>)
 8005548:	4413      	add	r3, r2
 800554a:	4299      	cmp	r1, r3
 800554c:	d12f      	bne.n	80055ae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3304      	adds	r3, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fdab 	bl	80040ae <uxListRemove>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	2201      	movs	r2, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43da      	mvns	r2, r3
 800556a:	4b1e      	ldr	r3, [pc, #120]	@ (80055e4 <xTaskPriorityInherit+0xe8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4013      	ands	r3, r2
 8005570:	4a1c      	ldr	r2, [pc, #112]	@ (80055e4 <xTaskPriorityInherit+0xe8>)
 8005572:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005574:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <xTaskPriorityInherit+0xe0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	2201      	movs	r2, #1
 8005584:	409a      	lsls	r2, r3
 8005586:	4b17      	ldr	r3, [pc, #92]	@ (80055e4 <xTaskPriorityInherit+0xe8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4313      	orrs	r3, r2
 800558c:	4a15      	ldr	r2, [pc, #84]	@ (80055e4 <xTaskPriorityInherit+0xe8>)
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4a10      	ldr	r2, [pc, #64]	@ (80055e0 <xTaskPriorityInherit+0xe4>)
 800559e:	441a      	add	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f7fe fd24 	bl	8003ff4 <vListInsertEnd>
 80055ac:	e004      	b.n	80055b8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055ae:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <xTaskPriorityInherit+0xe0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e008      	b.n	80055d0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055c2:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <xTaskPriorityInherit+0xe0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d201      	bcs.n	80055d0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055d0:	68fb      	ldr	r3, [r7, #12]
	}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000490 	.word	0x20000490
 80055e0:	20000494 	.word	0x20000494
 80055e4:	20000598 	.word	0x20000598

080055e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d070      	beq.n	80056e0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055fe:	4b3b      	ldr	r3, [pc, #236]	@ (80056ec <xTaskPriorityDisinherit+0x104>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	429a      	cmp	r2, r3
 8005606:	d00b      	beq.n	8005620 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	60fb      	str	r3, [r7, #12]
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	60bb      	str	r3, [r7, #8]
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005644:	1e5a      	subs	r2, r3, #1
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	429a      	cmp	r2, r3
 8005654:	d044      	beq.n	80056e0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800565a:	2b00      	cmp	r3, #0
 800565c:	d140      	bne.n	80056e0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3304      	adds	r3, #4
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fd23 	bl	80040ae <uxListRemove>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d115      	bne.n	800569a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005672:	491f      	ldr	r1, [pc, #124]	@ (80056f0 <xTaskPriorityDisinherit+0x108>)
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xTaskPriorityDisinherit+0xb2>
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	2201      	movs	r2, #1
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43da      	mvns	r2, r3
 8005690:	4b18      	ldr	r3, [pc, #96]	@ (80056f4 <xTaskPriorityDisinherit+0x10c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4013      	ands	r3, r2
 8005696:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <xTaskPriorityDisinherit+0x10c>)
 8005698:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	f1c3 0207 	rsb	r2, r3, #7
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	2201      	movs	r2, #1
 80056b4:	409a      	lsls	r2, r3
 80056b6:	4b0f      	ldr	r3, [pc, #60]	@ (80056f4 <xTaskPriorityDisinherit+0x10c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	4a0d      	ldr	r2, [pc, #52]	@ (80056f4 <xTaskPriorityDisinherit+0x10c>)
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4a08      	ldr	r2, [pc, #32]	@ (80056f0 <xTaskPriorityDisinherit+0x108>)
 80056ce:	441a      	add	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f7fe fc8c 	bl	8003ff4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056e0:	697b      	ldr	r3, [r7, #20]
	}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000490 	.word	0x20000490
 80056f0:	20000494 	.word	0x20000494
 80056f4:	20000598 	.word	0x20000598

080056f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005706:	2301      	movs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d079      	beq.n	8005804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d902      	bls.n	8005740 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	e002      	b.n	8005746 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005744:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	429a      	cmp	r2, r3
 800574e:	d059      	beq.n	8005804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	429a      	cmp	r2, r3
 8005758:	d154      	bne.n	8005804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800575a:	4b2c      	ldr	r3, [pc, #176]	@ (800580c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	429a      	cmp	r2, r3
 8005762:	d10b      	bne.n	800577c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	60bb      	str	r3, [r7, #8]
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	db04      	blt.n	800579a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f1c3 0207 	rsb	r2, r3, #7
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	6959      	ldr	r1, [r3, #20]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4a19      	ldr	r2, [pc, #100]	@ (8005810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80057aa:	4413      	add	r3, r2
 80057ac:	4299      	cmp	r1, r3
 80057ae:	d129      	bne.n	8005804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe fc7a 	bl	80040ae <uxListRemove>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	2201      	movs	r2, #1
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	43da      	mvns	r2, r3
 80057cc:	4b11      	ldr	r3, [pc, #68]	@ (8005814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4013      	ands	r3, r2
 80057d2:	4a10      	ldr	r2, [pc, #64]	@ (8005814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80057d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	2201      	movs	r2, #1
 80057dc:	409a      	lsls	r2, r3
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4a06      	ldr	r2, [pc, #24]	@ (8005810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80057f6:	441a      	add	r2, r3
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f7fe fbf8 	bl	8003ff4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005804:	bf00      	nop
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000490 	.word	0x20000490
 8005810:	20000494 	.word	0x20000494
 8005814:	20000598 	.word	0x20000598

08005818 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800581c:	4b07      	ldr	r3, [pc, #28]	@ (800583c <pvTaskIncrementMutexHeldCount+0x24>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005824:	4b05      	ldr	r3, [pc, #20]	@ (800583c <pvTaskIncrementMutexHeldCount+0x24>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800582a:	3201      	adds	r2, #1
 800582c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800582e:	4b03      	ldr	r3, [pc, #12]	@ (800583c <pvTaskIncrementMutexHeldCount+0x24>)
 8005830:	681b      	ldr	r3, [r3, #0]
	}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	20000490 	.word	0x20000490

08005840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800584a:	4b29      	ldr	r3, [pc, #164]	@ (80058f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005850:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3304      	adds	r3, #4
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe fc29 	bl	80040ae <uxListRemove>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005862:	4b24      	ldr	r3, [pc, #144]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	2201      	movs	r2, #1
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43da      	mvns	r2, r3
 8005870:	4b21      	ldr	r3, [pc, #132]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4013      	ands	r3, r2
 8005876:	4a20      	ldr	r2, [pc, #128]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005878:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d10a      	bne.n	8005898 <prvAddCurrentTaskToDelayedList+0x58>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005888:	4b1a      	ldr	r3, [pc, #104]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	481a      	ldr	r0, [pc, #104]	@ (80058fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005892:	f7fe fbaf 	bl	8003ff4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005896:	e026      	b.n	80058e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4413      	add	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058a0:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d209      	bcs.n	80058c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b0:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b0f      	ldr	r3, [pc, #60]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f7fe fbbd 	bl	800403c <vListInsert>
}
 80058c2:	e010      	b.n	80058e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f7fe fbb3 	bl	800403c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d202      	bcs.n	80058e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058e0:	4a09      	ldr	r2, [pc, #36]	@ (8005908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6013      	str	r3, [r2, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000594 	.word	0x20000594
 80058f4:	20000490 	.word	0x20000490
 80058f8:	20000598 	.word	0x20000598
 80058fc:	2000057c 	.word	0x2000057c
 8005900:	2000054c 	.word	0x2000054c
 8005904:	20000548 	.word	0x20000548
 8005908:	200005b0 	.word	0x200005b0

0800590c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3b04      	subs	r3, #4
 800591c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b04      	subs	r3, #4
 800592a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3b04      	subs	r3, #4
 800593a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800593c:	4a0c      	ldr	r2, [pc, #48]	@ (8005970 <pxPortInitialiseStack+0x64>)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3b14      	subs	r3, #20
 8005946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3b04      	subs	r3, #4
 8005952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f06f 0202 	mvn.w	r2, #2
 800595a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3b20      	subs	r3, #32
 8005960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	08005975 	.word	0x08005975

08005974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800597e:	4b13      	ldr	r3, [pc, #76]	@ (80059cc <prvTaskExitError+0x58>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d00b      	beq.n	80059a0 <prvTaskExitError+0x2c>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60fb      	str	r3, [r7, #12]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <prvTaskExitError+0x28>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	60bb      	str	r3, [r7, #8]
}
 80059b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059b4:	bf00      	nop
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0fc      	beq.n	80059b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000014 	.word	0x20000014

080059d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059d0:	4b07      	ldr	r3, [pc, #28]	@ (80059f0 <pxCurrentTCBConst2>)
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	6808      	ldr	r0, [r1, #0]
 80059d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	f380 8809 	msr	PSP, r0
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f04f 0000 	mov.w	r0, #0
 80059e6:	f380 8811 	msr	BASEPRI, r0
 80059ea:	4770      	bx	lr
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst2>:
 80059f0:	20000490 	.word	0x20000490
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059f8:	4808      	ldr	r0, [pc, #32]	@ (8005a1c <prvPortStartFirstTask+0x24>)
 80059fa:	6800      	ldr	r0, [r0, #0]
 80059fc:	6800      	ldr	r0, [r0, #0]
 80059fe:	f380 8808 	msr	MSP, r0
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f380 8814 	msr	CONTROL, r0
 8005a0a:	b662      	cpsie	i
 8005a0c:	b661      	cpsie	f
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	df00      	svc	0
 8005a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a1a:	bf00      	nop
 8005a1c:	e000ed08 	.word	0xe000ed08

08005a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a26:	4b47      	ldr	r3, [pc, #284]	@ (8005b44 <xPortStartScheduler+0x124>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a47      	ldr	r2, [pc, #284]	@ (8005b48 <xPortStartScheduler+0x128>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d10b      	bne.n	8005a48 <xPortStartScheduler+0x28>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	613b      	str	r3, [r7, #16]
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a48:	4b3e      	ldr	r3, [pc, #248]	@ (8005b44 <xPortStartScheduler+0x124>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b4c <xPortStartScheduler+0x12c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10b      	bne.n	8005a6a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60fb      	str	r3, [r7, #12]
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a6a:	4b39      	ldr	r3, [pc, #228]	@ (8005b50 <xPortStartScheduler+0x130>)
 8005a6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	22ff      	movs	r2, #255	@ 0xff
 8005a7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <xPortStartScheduler+0x134>)
 8005a90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a92:	4b31      	ldr	r3, [pc, #196]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005a94:	2207      	movs	r2, #7
 8005a96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a98:	e009      	b.n	8005aae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005aa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab6:	2b80      	cmp	r3, #128	@ 0x80
 8005ab8:	d0ef      	beq.n	8005a9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aba:	4b27      	ldr	r3, [pc, #156]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f1c3 0307 	rsb	r3, r3, #7
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d00b      	beq.n	8005ade <xPortStartScheduler+0xbe>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	60bb      	str	r3, [r7, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005af0:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005afc:	4b17      	ldr	r3, [pc, #92]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b08:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a13      	ldr	r2, [pc, #76]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b14:	f000 f8da 	bl	8005ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b18:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <xPortStartScheduler+0x140>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b1e:	f000 f8f9 	bl	8005d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b22:	4b10      	ldr	r3, [pc, #64]	@ (8005b64 <xPortStartScheduler+0x144>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a0f      	ldr	r2, [pc, #60]	@ (8005b64 <xPortStartScheduler+0x144>)
 8005b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b2e:	f7ff ff63 	bl	80059f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b32:	f7ff fa75 	bl	8005020 <vTaskSwitchContext>
	prvTaskExitError();
 8005b36:	f7ff ff1d 	bl	8005974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	e000ed00 	.word	0xe000ed00
 8005b48:	410fc271 	.word	0x410fc271
 8005b4c:	410fc270 	.word	0x410fc270
 8005b50:	e000e400 	.word	0xe000e400
 8005b54:	200005bc 	.word	0x200005bc
 8005b58:	200005c0 	.word	0x200005c0
 8005b5c:	e000ed20 	.word	0xe000ed20
 8005b60:	20000014 	.word	0x20000014
 8005b64:	e000ef34 	.word	0xe000ef34

08005b68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b82:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <vPortEnterCritical+0x5c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3301      	adds	r3, #1
 8005b88:	4a0e      	ldr	r2, [pc, #56]	@ (8005bc4 <vPortEnterCritical+0x5c>)
 8005b8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <vPortEnterCritical+0x5c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d110      	bne.n	8005bb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b94:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <vPortEnterCritical+0x60>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	603b      	str	r3, [r7, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <vPortEnterCritical+0x4a>
	}
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000014 	.word	0x20000014
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bd2:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <vPortExitCritical+0x26>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	607b      	str	r3, [r7, #4]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	4a08      	ldr	r2, [pc, #32]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bfc:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <vPortExitCritical+0x44>
 8005c04:	2300      	movs	r3, #0
 8005c06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20000014 	.word	0x20000014

08005c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c20:	f3ef 8009 	mrs	r0, PSP
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4b15      	ldr	r3, [pc, #84]	@ (8005c80 <pxCurrentTCBConst>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f01e 0f10 	tst.w	lr, #16
 8005c30:	bf08      	it	eq
 8005c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3a:	6010      	str	r0, [r2, #0]
 8005c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c44:	f380 8811 	msr	BASEPRI, r0
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f7ff f9e6 	bl	8005020 <vTaskSwitchContext>
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	f380 8811 	msr	BASEPRI, r0
 8005c5c:	bc09      	pop	{r0, r3}
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	6808      	ldr	r0, [r1, #0]
 8005c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c66:	f01e 0f10 	tst.w	lr, #16
 8005c6a:	bf08      	it	eq
 8005c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c70:	f380 8809 	msr	PSP, r0
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst>:
 8005c80:	20000490 	.word	0x20000490
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ca2:	f7ff f903 	bl	8004eac <xTaskIncrementTick>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cac:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <SysTick_Handler+0x40>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f383 8811 	msr	BASEPRI, r3
}
 8005cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <vPortSetupTimerInterrupt+0x38>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <vPortSetupTimerInterrupt+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8005d0c <vPortSetupTimerInterrupt+0x40>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	4a09      	ldr	r2, [pc, #36]	@ (8005d10 <vPortSetupTimerInterrupt+0x44>)
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cee:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000e010 	.word	0xe000e010
 8005d04:	e000e018 	.word	0xe000e018
 8005d08:	20000008 	.word	0x20000008
 8005d0c:	10624dd3 	.word	0x10624dd3
 8005d10:	e000e014 	.word	0xe000e014

08005d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d24 <vPortEnableVFP+0x10>
 8005d18:	6801      	ldr	r1, [r0, #0]
 8005d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d1e:	6001      	str	r1, [r0, #0]
 8005d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d22:	bf00      	nop
 8005d24:	e000ed88 	.word	0xe000ed88

08005d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	@ 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d34:	f7ff f80e 	bl	8004d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d38:	4b5c      	ldr	r3, [pc, #368]	@ (8005eac <pvPortMalloc+0x184>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d40:	f000 f924 	bl	8005f8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d44:	4b5a      	ldr	r3, [pc, #360]	@ (8005eb0 <pvPortMalloc+0x188>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 8095 	bne.w	8005e7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01e      	beq.n	8005d96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d58:	2208      	movs	r2, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d015      	beq.n	8005d96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f023 0307 	bic.w	r3, r3, #7
 8005d70:	3308      	adds	r3, #8
 8005d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <pvPortMalloc+0x6e>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	617b      	str	r3, [r7, #20]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d06f      	beq.n	8005e7c <pvPortMalloc+0x154>
 8005d9c:	4b45      	ldr	r3, [pc, #276]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d86a      	bhi.n	8005e7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005da6:	4b44      	ldr	r3, [pc, #272]	@ (8005eb8 <pvPortMalloc+0x190>)
 8005da8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005daa:	4b43      	ldr	r3, [pc, #268]	@ (8005eb8 <pvPortMalloc+0x190>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005db0:	e004      	b.n	8005dbc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d903      	bls.n	8005dce <pvPortMalloc+0xa6>
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f1      	bne.n	8005db2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dce:	4b37      	ldr	r3, [pc, #220]	@ (8005eac <pvPortMalloc+0x184>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d051      	beq.n	8005e7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4413      	add	r3, r2
 8005de0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	1ad2      	subs	r2, r2, r3
 8005df2:	2308      	movs	r3, #8
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d920      	bls.n	8005e3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <pvPortMalloc+0xfc>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	613b      	str	r3, [r7, #16]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e36:	69b8      	ldr	r0, [r7, #24]
 8005e38:	f000 f90a 	bl	8006050 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <pvPortMalloc+0x194>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d203      	bcs.n	8005e5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e56:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <pvPortMalloc+0x194>)
 8005e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <pvPortMalloc+0x188>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e72:	4b13      	ldr	r3, [pc, #76]	@ (8005ec0 <pvPortMalloc+0x198>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3301      	adds	r3, #1
 8005e78:	4a11      	ldr	r2, [pc, #68]	@ (8005ec0 <pvPortMalloc+0x198>)
 8005e7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e7c:	f7fe ff78 	bl	8004d70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <pvPortMalloc+0x17a>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	60fb      	str	r3, [r7, #12]
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <pvPortMalloc+0x176>
	return pvReturn;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3728      	adds	r7, #40	@ 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20001184 	.word	0x20001184
 8005eb0:	20001198 	.word	0x20001198
 8005eb4:	20001188 	.word	0x20001188
 8005eb8:	2000117c 	.word	0x2000117c
 8005ebc:	2000118c 	.word	0x2000118c
 8005ec0:	20001190 	.word	0x20001190

08005ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04f      	beq.n	8005f76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	425b      	negs	r3, r3
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	4b25      	ldr	r3, [pc, #148]	@ (8005f80 <vPortFree+0xbc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <vPortFree+0x46>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60fb      	str	r3, [r7, #12]
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	e7fd      	b.n	8005f06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <vPortFree+0x66>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60bb      	str	r3, [r7, #8]
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	4b14      	ldr	r3, [pc, #80]	@ (8005f80 <vPortFree+0xbc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4013      	ands	r3, r2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01e      	beq.n	8005f76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11a      	bne.n	8005f76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4b0e      	ldr	r3, [pc, #56]	@ (8005f80 <vPortFree+0xbc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f50:	f7fe ff00 	bl	8004d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <vPortFree+0xc0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4a09      	ldr	r2, [pc, #36]	@ (8005f84 <vPortFree+0xc0>)
 8005f60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f62:	6938      	ldr	r0, [r7, #16]
 8005f64:	f000 f874 	bl	8006050 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f68:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <vPortFree+0xc4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	4a06      	ldr	r2, [pc, #24]	@ (8005f88 <vPortFree+0xc4>)
 8005f70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f72:	f7fe fefd 	bl	8004d70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f76:	bf00      	nop
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20001198 	.word	0x20001198
 8005f84:	20001188 	.word	0x20001188
 8005f88:	20001194 	.word	0x20001194

08005f8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005f96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f98:	4b27      	ldr	r3, [pc, #156]	@ (8006038 <prvHeapInit+0xac>)
 8005f9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3307      	adds	r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	4a1f      	ldr	r2, [pc, #124]	@ (8006038 <prvHeapInit+0xac>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800603c <prvHeapInit+0xb0>)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fca:	4b1c      	ldr	r3, [pc, #112]	@ (800603c <prvHeapInit+0xb0>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fd8:	2208      	movs	r2, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a15      	ldr	r2, [pc, #84]	@ (8006040 <prvHeapInit+0xb4>)
 8005fec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fee:	4b14      	ldr	r3, [pc, #80]	@ (8006040 <prvHeapInit+0xb4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ff6:	4b12      	ldr	r3, [pc, #72]	@ (8006040 <prvHeapInit+0xb4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	1ad2      	subs	r2, r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <prvHeapInit+0xb4>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	4a0a      	ldr	r2, [pc, #40]	@ (8006044 <prvHeapInit+0xb8>)
 800601a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a09      	ldr	r2, [pc, #36]	@ (8006048 <prvHeapInit+0xbc>)
 8006022:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006024:	4b09      	ldr	r3, [pc, #36]	@ (800604c <prvHeapInit+0xc0>)
 8006026:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800602a:	601a      	str	r2, [r3, #0]
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	200005c4 	.word	0x200005c4
 800603c:	2000117c 	.word	0x2000117c
 8006040:	20001184 	.word	0x20001184
 8006044:	2000118c 	.word	0x2000118c
 8006048:	20001188 	.word	0x20001188
 800604c:	20001198 	.word	0x20001198

08006050 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006058:	4b28      	ldr	r3, [pc, #160]	@ (80060fc <prvInsertBlockIntoFreeList+0xac>)
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e002      	b.n	8006064 <prvInsertBlockIntoFreeList+0x14>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d8f7      	bhi.n	800605e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d108      	bne.n	8006092 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d118      	bne.n	80060d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d00d      	beq.n	80060ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e008      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e003      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d002      	beq.n	80060ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	2000117c 	.word	0x2000117c
 8006100:	20001184 	.word	0x20001184

08006104 <_ZdaPv>:
 8006104:	f000 b811 	b.w	800612a <_ZdlPv>

08006108 <__cxa_guard_acquire>:
 8006108:	6802      	ldr	r2, [r0, #0]
 800610a:	07d2      	lsls	r2, r2, #31
 800610c:	4603      	mov	r3, r0
 800610e:	d405      	bmi.n	800611c <__cxa_guard_acquire+0x14>
 8006110:	7842      	ldrb	r2, [r0, #1]
 8006112:	b102      	cbz	r2, 8006116 <__cxa_guard_acquire+0xe>
 8006114:	deff      	udf	#255	@ 0xff
 8006116:	2001      	movs	r0, #1
 8006118:	7058      	strb	r0, [r3, #1]
 800611a:	4770      	bx	lr
 800611c:	2000      	movs	r0, #0
 800611e:	4770      	bx	lr

08006120 <__cxa_guard_release>:
 8006120:	2301      	movs	r3, #1
 8006122:	6003      	str	r3, [r0, #0]
 8006124:	4770      	bx	lr

08006126 <_Znaj>:
 8006126:	f000 b802 	b.w	800612e <_Znwj>

0800612a <_ZdlPv>:
 800612a:	f000 b829 	b.w	8006180 <free>

0800612e <_Znwj>:
 800612e:	2801      	cmp	r0, #1
 8006130:	bf38      	it	cc
 8006132:	2001      	movcc	r0, #1
 8006134:	b510      	push	{r4, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	4620      	mov	r0, r4
 800613a:	f000 f819 	bl	8006170 <malloc>
 800613e:	b100      	cbz	r0, 8006142 <_Znwj+0x14>
 8006140:	bd10      	pop	{r4, pc}
 8006142:	f000 f805 	bl	8006150 <_ZSt15get_new_handlerv>
 8006146:	b908      	cbnz	r0, 800614c <_Znwj+0x1e>
 8006148:	f000 f80a 	bl	8006160 <abort>
 800614c:	4780      	blx	r0
 800614e:	e7f3      	b.n	8006138 <_Znwj+0xa>

08006150 <_ZSt15get_new_handlerv>:
 8006150:	4b02      	ldr	r3, [pc, #8]	@ (800615c <_ZSt15get_new_handlerv+0xc>)
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	f3bf 8f5b 	dmb	ish
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	2000119c 	.word	0x2000119c

08006160 <abort>:
 8006160:	b508      	push	{r3, lr}
 8006162:	2006      	movs	r0, #6
 8006164:	f000 f92c 	bl	80063c0 <raise>
 8006168:	2001      	movs	r0, #1
 800616a:	f7fa fd61 	bl	8000c30 <_exit>
	...

08006170 <malloc>:
 8006170:	4b02      	ldr	r3, [pc, #8]	@ (800617c <malloc+0xc>)
 8006172:	4601      	mov	r1, r0
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	f000 b82d 	b.w	80061d4 <_malloc_r>
 800617a:	bf00      	nop
 800617c:	20000018 	.word	0x20000018

08006180 <free>:
 8006180:	4b02      	ldr	r3, [pc, #8]	@ (800618c <free+0xc>)
 8006182:	4601      	mov	r1, r0
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f000 b9d7 	b.w	8006538 <_free_r>
 800618a:	bf00      	nop
 800618c:	20000018 	.word	0x20000018

08006190 <sbrk_aligned>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	4e0f      	ldr	r6, [pc, #60]	@ (80061d0 <sbrk_aligned+0x40>)
 8006194:	460c      	mov	r4, r1
 8006196:	6831      	ldr	r1, [r6, #0]
 8006198:	4605      	mov	r5, r0
 800619a:	b911      	cbnz	r1, 80061a2 <sbrk_aligned+0x12>
 800619c:	f000 f982 	bl	80064a4 <_sbrk_r>
 80061a0:	6030      	str	r0, [r6, #0]
 80061a2:	4621      	mov	r1, r4
 80061a4:	4628      	mov	r0, r5
 80061a6:	f000 f97d 	bl	80064a4 <_sbrk_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d103      	bne.n	80061b6 <sbrk_aligned+0x26>
 80061ae:	f04f 34ff 	mov.w	r4, #4294967295
 80061b2:	4620      	mov	r0, r4
 80061b4:	bd70      	pop	{r4, r5, r6, pc}
 80061b6:	1cc4      	adds	r4, r0, #3
 80061b8:	f024 0403 	bic.w	r4, r4, #3
 80061bc:	42a0      	cmp	r0, r4
 80061be:	d0f8      	beq.n	80061b2 <sbrk_aligned+0x22>
 80061c0:	1a21      	subs	r1, r4, r0
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 f96e 	bl	80064a4 <_sbrk_r>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d1f2      	bne.n	80061b2 <sbrk_aligned+0x22>
 80061cc:	e7ef      	b.n	80061ae <sbrk_aligned+0x1e>
 80061ce:	bf00      	nop
 80061d0:	200011a0 	.word	0x200011a0

080061d4 <_malloc_r>:
 80061d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d8:	1ccd      	adds	r5, r1, #3
 80061da:	f025 0503 	bic.w	r5, r5, #3
 80061de:	3508      	adds	r5, #8
 80061e0:	2d0c      	cmp	r5, #12
 80061e2:	bf38      	it	cc
 80061e4:	250c      	movcc	r5, #12
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	4606      	mov	r6, r0
 80061ea:	db01      	blt.n	80061f0 <_malloc_r+0x1c>
 80061ec:	42a9      	cmp	r1, r5
 80061ee:	d904      	bls.n	80061fa <_malloc_r+0x26>
 80061f0:	230c      	movs	r3, #12
 80061f2:	6033      	str	r3, [r6, #0]
 80061f4:	2000      	movs	r0, #0
 80061f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062d0 <_malloc_r+0xfc>
 80061fe:	f000 f869 	bl	80062d4 <__malloc_lock>
 8006202:	f8d8 3000 	ldr.w	r3, [r8]
 8006206:	461c      	mov	r4, r3
 8006208:	bb44      	cbnz	r4, 800625c <_malloc_r+0x88>
 800620a:	4629      	mov	r1, r5
 800620c:	4630      	mov	r0, r6
 800620e:	f7ff ffbf 	bl	8006190 <sbrk_aligned>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	4604      	mov	r4, r0
 8006216:	d158      	bne.n	80062ca <_malloc_r+0xf6>
 8006218:	f8d8 4000 	ldr.w	r4, [r8]
 800621c:	4627      	mov	r7, r4
 800621e:	2f00      	cmp	r7, #0
 8006220:	d143      	bne.n	80062aa <_malloc_r+0xd6>
 8006222:	2c00      	cmp	r4, #0
 8006224:	d04b      	beq.n	80062be <_malloc_r+0xea>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	4639      	mov	r1, r7
 800622a:	4630      	mov	r0, r6
 800622c:	eb04 0903 	add.w	r9, r4, r3
 8006230:	f000 f938 	bl	80064a4 <_sbrk_r>
 8006234:	4581      	cmp	r9, r0
 8006236:	d142      	bne.n	80062be <_malloc_r+0xea>
 8006238:	6821      	ldr	r1, [r4, #0]
 800623a:	1a6d      	subs	r5, r5, r1
 800623c:	4629      	mov	r1, r5
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ffa6 	bl	8006190 <sbrk_aligned>
 8006244:	3001      	adds	r0, #1
 8006246:	d03a      	beq.n	80062be <_malloc_r+0xea>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	442b      	add	r3, r5
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	f8d8 3000 	ldr.w	r3, [r8]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	bb62      	cbnz	r2, 80062b0 <_malloc_r+0xdc>
 8006256:	f8c8 7000 	str.w	r7, [r8]
 800625a:	e00f      	b.n	800627c <_malloc_r+0xa8>
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	1b52      	subs	r2, r2, r5
 8006260:	d420      	bmi.n	80062a4 <_malloc_r+0xd0>
 8006262:	2a0b      	cmp	r2, #11
 8006264:	d917      	bls.n	8006296 <_malloc_r+0xc2>
 8006266:	1961      	adds	r1, r4, r5
 8006268:	42a3      	cmp	r3, r4
 800626a:	6025      	str	r5, [r4, #0]
 800626c:	bf18      	it	ne
 800626e:	6059      	strne	r1, [r3, #4]
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	bf08      	it	eq
 8006274:	f8c8 1000 	streq.w	r1, [r8]
 8006278:	5162      	str	r2, [r4, r5]
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	4630      	mov	r0, r6
 800627e:	f000 f82f 	bl	80062e0 <__malloc_unlock>
 8006282:	f104 000b 	add.w	r0, r4, #11
 8006286:	1d23      	adds	r3, r4, #4
 8006288:	f020 0007 	bic.w	r0, r0, #7
 800628c:	1ac2      	subs	r2, r0, r3
 800628e:	bf1c      	itt	ne
 8006290:	1a1b      	subne	r3, r3, r0
 8006292:	50a3      	strne	r3, [r4, r2]
 8006294:	e7af      	b.n	80061f6 <_malloc_r+0x22>
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	42a3      	cmp	r3, r4
 800629a:	bf0c      	ite	eq
 800629c:	f8c8 2000 	streq.w	r2, [r8]
 80062a0:	605a      	strne	r2, [r3, #4]
 80062a2:	e7eb      	b.n	800627c <_malloc_r+0xa8>
 80062a4:	4623      	mov	r3, r4
 80062a6:	6864      	ldr	r4, [r4, #4]
 80062a8:	e7ae      	b.n	8006208 <_malloc_r+0x34>
 80062aa:	463c      	mov	r4, r7
 80062ac:	687f      	ldr	r7, [r7, #4]
 80062ae:	e7b6      	b.n	800621e <_malloc_r+0x4a>
 80062b0:	461a      	mov	r2, r3
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d1fb      	bne.n	80062b0 <_malloc_r+0xdc>
 80062b8:	2300      	movs	r3, #0
 80062ba:	6053      	str	r3, [r2, #4]
 80062bc:	e7de      	b.n	800627c <_malloc_r+0xa8>
 80062be:	230c      	movs	r3, #12
 80062c0:	6033      	str	r3, [r6, #0]
 80062c2:	4630      	mov	r0, r6
 80062c4:	f000 f80c 	bl	80062e0 <__malloc_unlock>
 80062c8:	e794      	b.n	80061f4 <_malloc_r+0x20>
 80062ca:	6005      	str	r5, [r0, #0]
 80062cc:	e7d6      	b.n	800627c <_malloc_r+0xa8>
 80062ce:	bf00      	nop
 80062d0:	200011a4 	.word	0x200011a4

080062d4 <__malloc_lock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	@ (80062dc <__malloc_lock+0x8>)
 80062d6:	f000 b91f 	b.w	8006518 <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	200012e4 	.word	0x200012e4

080062e0 <__malloc_unlock>:
 80062e0:	4801      	ldr	r0, [pc, #4]	@ (80062e8 <__malloc_unlock+0x8>)
 80062e2:	f000 b91a 	b.w	800651a <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	200012e4 	.word	0x200012e4

080062ec <_vsniprintf_r>:
 80062ec:	b530      	push	{r4, r5, lr}
 80062ee:	4614      	mov	r4, r2
 80062f0:	2c00      	cmp	r4, #0
 80062f2:	b09b      	sub	sp, #108	@ 0x6c
 80062f4:	4605      	mov	r5, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	da05      	bge.n	8006306 <_vsniprintf_r+0x1a>
 80062fa:	238b      	movs	r3, #139	@ 0x8b
 80062fc:	6003      	str	r3, [r0, #0]
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006302:	b01b      	add	sp, #108	@ 0x6c
 8006304:	bd30      	pop	{r4, r5, pc}
 8006306:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800630a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800630e:	bf14      	ite	ne
 8006310:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006314:	4623      	moveq	r3, r4
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800631e:	9100      	str	r1, [sp, #0]
 8006320:	9104      	str	r1, [sp, #16]
 8006322:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006326:	4669      	mov	r1, sp
 8006328:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800632a:	f000 f9ab 	bl	8006684 <_svfiprintf_r>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	bfbc      	itt	lt
 8006332:	238b      	movlt	r3, #139	@ 0x8b
 8006334:	602b      	strlt	r3, [r5, #0]
 8006336:	2c00      	cmp	r4, #0
 8006338:	d0e3      	beq.n	8006302 <_vsniprintf_r+0x16>
 800633a:	9b00      	ldr	r3, [sp, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e7df      	b.n	8006302 <_vsniprintf_r+0x16>
	...

08006344 <vsniprintf>:
 8006344:	b507      	push	{r0, r1, r2, lr}
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	460a      	mov	r2, r1
 800634c:	4601      	mov	r1, r0
 800634e:	4803      	ldr	r0, [pc, #12]	@ (800635c <vsniprintf+0x18>)
 8006350:	6800      	ldr	r0, [r0, #0]
 8006352:	f7ff ffcb 	bl	80062ec <_vsniprintf_r>
 8006356:	b003      	add	sp, #12
 8006358:	f85d fb04 	ldr.w	pc, [sp], #4
 800635c:	20000018 	.word	0x20000018

08006360 <memset>:
 8006360:	4402      	add	r2, r0
 8006362:	4603      	mov	r3, r0
 8006364:	4293      	cmp	r3, r2
 8006366:	d100      	bne.n	800636a <memset+0xa>
 8006368:	4770      	bx	lr
 800636a:	f803 1b01 	strb.w	r1, [r3], #1
 800636e:	e7f9      	b.n	8006364 <memset+0x4>

08006370 <_raise_r>:
 8006370:	291f      	cmp	r1, #31
 8006372:	b538      	push	{r3, r4, r5, lr}
 8006374:	4605      	mov	r5, r0
 8006376:	460c      	mov	r4, r1
 8006378:	d904      	bls.n	8006384 <_raise_r+0x14>
 800637a:	2316      	movs	r3, #22
 800637c:	6003      	str	r3, [r0, #0]
 800637e:	f04f 30ff 	mov.w	r0, #4294967295
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006386:	b112      	cbz	r2, 800638e <_raise_r+0x1e>
 8006388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800638c:	b94b      	cbnz	r3, 80063a2 <_raise_r+0x32>
 800638e:	4628      	mov	r0, r5
 8006390:	f000 f886 	bl	80064a0 <_getpid_r>
 8006394:	4622      	mov	r2, r4
 8006396:	4601      	mov	r1, r0
 8006398:	4628      	mov	r0, r5
 800639a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800639e:	f000 b86d 	b.w	800647c <_kill_r>
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d00a      	beq.n	80063bc <_raise_r+0x4c>
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	d103      	bne.n	80063b2 <_raise_r+0x42>
 80063aa:	2316      	movs	r3, #22
 80063ac:	6003      	str	r3, [r0, #0]
 80063ae:	2001      	movs	r0, #1
 80063b0:	e7e7      	b.n	8006382 <_raise_r+0x12>
 80063b2:	2100      	movs	r1, #0
 80063b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80063b8:	4620      	mov	r0, r4
 80063ba:	4798      	blx	r3
 80063bc:	2000      	movs	r0, #0
 80063be:	e7e0      	b.n	8006382 <_raise_r+0x12>

080063c0 <raise>:
 80063c0:	4b02      	ldr	r3, [pc, #8]	@ (80063cc <raise+0xc>)
 80063c2:	4601      	mov	r1, r0
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	f7ff bfd3 	b.w	8006370 <_raise_r>
 80063ca:	bf00      	nop
 80063cc:	20000018 	.word	0x20000018

080063d0 <_reclaim_reent>:
 80063d0:	4b29      	ldr	r3, [pc, #164]	@ (8006478 <_reclaim_reent+0xa8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4283      	cmp	r3, r0
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	d04b      	beq.n	8006474 <_reclaim_reent+0xa4>
 80063dc:	69c3      	ldr	r3, [r0, #28]
 80063de:	b1ab      	cbz	r3, 800640c <_reclaim_reent+0x3c>
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	b16b      	cbz	r3, 8006400 <_reclaim_reent+0x30>
 80063e4:	2500      	movs	r5, #0
 80063e6:	69e3      	ldr	r3, [r4, #28]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	5959      	ldr	r1, [r3, r5]
 80063ec:	2900      	cmp	r1, #0
 80063ee:	d13b      	bne.n	8006468 <_reclaim_reent+0x98>
 80063f0:	3504      	adds	r5, #4
 80063f2:	2d80      	cmp	r5, #128	@ 0x80
 80063f4:	d1f7      	bne.n	80063e6 <_reclaim_reent+0x16>
 80063f6:	69e3      	ldr	r3, [r4, #28]
 80063f8:	4620      	mov	r0, r4
 80063fa:	68d9      	ldr	r1, [r3, #12]
 80063fc:	f000 f89c 	bl	8006538 <_free_r>
 8006400:	69e3      	ldr	r3, [r4, #28]
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	b111      	cbz	r1, 800640c <_reclaim_reent+0x3c>
 8006406:	4620      	mov	r0, r4
 8006408:	f000 f896 	bl	8006538 <_free_r>
 800640c:	6961      	ldr	r1, [r4, #20]
 800640e:	b111      	cbz	r1, 8006416 <_reclaim_reent+0x46>
 8006410:	4620      	mov	r0, r4
 8006412:	f000 f891 	bl	8006538 <_free_r>
 8006416:	69e1      	ldr	r1, [r4, #28]
 8006418:	b111      	cbz	r1, 8006420 <_reclaim_reent+0x50>
 800641a:	4620      	mov	r0, r4
 800641c:	f000 f88c 	bl	8006538 <_free_r>
 8006420:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006422:	b111      	cbz	r1, 800642a <_reclaim_reent+0x5a>
 8006424:	4620      	mov	r0, r4
 8006426:	f000 f887 	bl	8006538 <_free_r>
 800642a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800642c:	b111      	cbz	r1, 8006434 <_reclaim_reent+0x64>
 800642e:	4620      	mov	r0, r4
 8006430:	f000 f882 	bl	8006538 <_free_r>
 8006434:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006436:	b111      	cbz	r1, 800643e <_reclaim_reent+0x6e>
 8006438:	4620      	mov	r0, r4
 800643a:	f000 f87d 	bl	8006538 <_free_r>
 800643e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006440:	b111      	cbz	r1, 8006448 <_reclaim_reent+0x78>
 8006442:	4620      	mov	r0, r4
 8006444:	f000 f878 	bl	8006538 <_free_r>
 8006448:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800644a:	b111      	cbz	r1, 8006452 <_reclaim_reent+0x82>
 800644c:	4620      	mov	r0, r4
 800644e:	f000 f873 	bl	8006538 <_free_r>
 8006452:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006454:	b111      	cbz	r1, 800645c <_reclaim_reent+0x8c>
 8006456:	4620      	mov	r0, r4
 8006458:	f000 f86e 	bl	8006538 <_free_r>
 800645c:	6a23      	ldr	r3, [r4, #32]
 800645e:	b14b      	cbz	r3, 8006474 <_reclaim_reent+0xa4>
 8006460:	4620      	mov	r0, r4
 8006462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006466:	4718      	bx	r3
 8006468:	680e      	ldr	r6, [r1, #0]
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f864 	bl	8006538 <_free_r>
 8006470:	4631      	mov	r1, r6
 8006472:	e7bb      	b.n	80063ec <_reclaim_reent+0x1c>
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	bf00      	nop
 8006478:	20000018 	.word	0x20000018

0800647c <_kill_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d07      	ldr	r5, [pc, #28]	@ (800649c <_kill_r+0x20>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	f7fa fbc1 	bl	8000c10 <_kill>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d102      	bne.n	8006498 <_kill_r+0x1c>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	b103      	cbz	r3, 8006498 <_kill_r+0x1c>
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	bf00      	nop
 800649c:	200012e0 	.word	0x200012e0

080064a0 <_getpid_r>:
 80064a0:	f7fa bbae 	b.w	8000c00 <_getpid>

080064a4 <_sbrk_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d06      	ldr	r5, [pc, #24]	@ (80064c0 <_sbrk_r+0x1c>)
 80064a8:	2300      	movs	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	4608      	mov	r0, r1
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	f7fa fbca 	bl	8000c48 <_sbrk>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_sbrk_r+0x1a>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_sbrk_r+0x1a>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	200012e0 	.word	0x200012e0

080064c4 <__errno>:
 80064c4:	4b01      	ldr	r3, [pc, #4]	@ (80064cc <__errno+0x8>)
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000018 	.word	0x20000018

080064d0 <__libc_init_array>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006508 <__libc_init_array+0x38>)
 80064d4:	4c0d      	ldr	r4, [pc, #52]	@ (800650c <__libc_init_array+0x3c>)
 80064d6:	1b64      	subs	r4, r4, r5
 80064d8:	10a4      	asrs	r4, r4, #2
 80064da:	2600      	movs	r6, #0
 80064dc:	42a6      	cmp	r6, r4
 80064de:	d109      	bne.n	80064f4 <__libc_init_array+0x24>
 80064e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006510 <__libc_init_array+0x40>)
 80064e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006514 <__libc_init_array+0x44>)
 80064e4:	f000 fba8 	bl	8006c38 <_init>
 80064e8:	1b64      	subs	r4, r4, r5
 80064ea:	10a4      	asrs	r4, r4, #2
 80064ec:	2600      	movs	r6, #0
 80064ee:	42a6      	cmp	r6, r4
 80064f0:	d105      	bne.n	80064fe <__libc_init_array+0x2e>
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f8:	4798      	blx	r3
 80064fa:	3601      	adds	r6, #1
 80064fc:	e7ee      	b.n	80064dc <__libc_init_array+0xc>
 80064fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006502:	4798      	blx	r3
 8006504:	3601      	adds	r6, #1
 8006506:	e7f2      	b.n	80064ee <__libc_init_array+0x1e>
 8006508:	08006d0c 	.word	0x08006d0c
 800650c:	08006d0c 	.word	0x08006d0c
 8006510:	08006d0c 	.word	0x08006d0c
 8006514:	08006d14 	.word	0x08006d14

08006518 <__retarget_lock_acquire_recursive>:
 8006518:	4770      	bx	lr

0800651a <__retarget_lock_release_recursive>:
 800651a:	4770      	bx	lr

0800651c <memcpy>:
 800651c:	440a      	add	r2, r1
 800651e:	4291      	cmp	r1, r2
 8006520:	f100 33ff 	add.w	r3, r0, #4294967295
 8006524:	d100      	bne.n	8006528 <memcpy+0xc>
 8006526:	4770      	bx	lr
 8006528:	b510      	push	{r4, lr}
 800652a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006532:	4291      	cmp	r1, r2
 8006534:	d1f9      	bne.n	800652a <memcpy+0xe>
 8006536:	bd10      	pop	{r4, pc}

08006538 <_free_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4605      	mov	r5, r0
 800653c:	2900      	cmp	r1, #0
 800653e:	d041      	beq.n	80065c4 <_free_r+0x8c>
 8006540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006544:	1f0c      	subs	r4, r1, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfb8      	it	lt
 800654a:	18e4      	addlt	r4, r4, r3
 800654c:	f7ff fec2 	bl	80062d4 <__malloc_lock>
 8006550:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <_free_r+0x90>)
 8006552:	6813      	ldr	r3, [r2, #0]
 8006554:	b933      	cbnz	r3, 8006564 <_free_r+0x2c>
 8006556:	6063      	str	r3, [r4, #4]
 8006558:	6014      	str	r4, [r2, #0]
 800655a:	4628      	mov	r0, r5
 800655c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006560:	f7ff bebe 	b.w	80062e0 <__malloc_unlock>
 8006564:	42a3      	cmp	r3, r4
 8006566:	d908      	bls.n	800657a <_free_r+0x42>
 8006568:	6820      	ldr	r0, [r4, #0]
 800656a:	1821      	adds	r1, r4, r0
 800656c:	428b      	cmp	r3, r1
 800656e:	bf01      	itttt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	1809      	addeq	r1, r1, r0
 8006576:	6021      	streq	r1, [r4, #0]
 8006578:	e7ed      	b.n	8006556 <_free_r+0x1e>
 800657a:	461a      	mov	r2, r3
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	b10b      	cbz	r3, 8006584 <_free_r+0x4c>
 8006580:	42a3      	cmp	r3, r4
 8006582:	d9fa      	bls.n	800657a <_free_r+0x42>
 8006584:	6811      	ldr	r1, [r2, #0]
 8006586:	1850      	adds	r0, r2, r1
 8006588:	42a0      	cmp	r0, r4
 800658a:	d10b      	bne.n	80065a4 <_free_r+0x6c>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	4401      	add	r1, r0
 8006590:	1850      	adds	r0, r2, r1
 8006592:	4283      	cmp	r3, r0
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	d1e0      	bne.n	800655a <_free_r+0x22>
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	6053      	str	r3, [r2, #4]
 800659e:	4408      	add	r0, r1
 80065a0:	6010      	str	r0, [r2, #0]
 80065a2:	e7da      	b.n	800655a <_free_r+0x22>
 80065a4:	d902      	bls.n	80065ac <_free_r+0x74>
 80065a6:	230c      	movs	r3, #12
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	e7d6      	b.n	800655a <_free_r+0x22>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	1821      	adds	r1, r4, r0
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf04      	itt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	bf04      	itt	eq
 80065bc:	1809      	addeq	r1, r1, r0
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	6054      	str	r4, [r2, #4]
 80065c2:	e7ca      	b.n	800655a <_free_r+0x22>
 80065c4:	bd38      	pop	{r3, r4, r5, pc}
 80065c6:	bf00      	nop
 80065c8:	200011a4 	.word	0x200011a4

080065cc <__ssputs_r>:
 80065cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d0:	688e      	ldr	r6, [r1, #8]
 80065d2:	461f      	mov	r7, r3
 80065d4:	42be      	cmp	r6, r7
 80065d6:	680b      	ldr	r3, [r1, #0]
 80065d8:	4682      	mov	sl, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	4690      	mov	r8, r2
 80065de:	d82d      	bhi.n	800663c <__ssputs_r+0x70>
 80065e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065e8:	d026      	beq.n	8006638 <__ssputs_r+0x6c>
 80065ea:	6965      	ldr	r5, [r4, #20]
 80065ec:	6909      	ldr	r1, [r1, #16]
 80065ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065f2:	eba3 0901 	sub.w	r9, r3, r1
 80065f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065fa:	1c7b      	adds	r3, r7, #1
 80065fc:	444b      	add	r3, r9
 80065fe:	106d      	asrs	r5, r5, #1
 8006600:	429d      	cmp	r5, r3
 8006602:	bf38      	it	cc
 8006604:	461d      	movcc	r5, r3
 8006606:	0553      	lsls	r3, r2, #21
 8006608:	d527      	bpl.n	800665a <__ssputs_r+0x8e>
 800660a:	4629      	mov	r1, r5
 800660c:	f7ff fde2 	bl	80061d4 <_malloc_r>
 8006610:	4606      	mov	r6, r0
 8006612:	b360      	cbz	r0, 800666e <__ssputs_r+0xa2>
 8006614:	6921      	ldr	r1, [r4, #16]
 8006616:	464a      	mov	r2, r9
 8006618:	f7ff ff80 	bl	800651c <memcpy>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	6126      	str	r6, [r4, #16]
 800662a:	6165      	str	r5, [r4, #20]
 800662c:	444e      	add	r6, r9
 800662e:	eba5 0509 	sub.w	r5, r5, r9
 8006632:	6026      	str	r6, [r4, #0]
 8006634:	60a5      	str	r5, [r4, #8]
 8006636:	463e      	mov	r6, r7
 8006638:	42be      	cmp	r6, r7
 800663a:	d900      	bls.n	800663e <__ssputs_r+0x72>
 800663c:	463e      	mov	r6, r7
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	4632      	mov	r2, r6
 8006642:	4641      	mov	r1, r8
 8006644:	f000 faa8 	bl	8006b98 <memmove>
 8006648:	68a3      	ldr	r3, [r4, #8]
 800664a:	1b9b      	subs	r3, r3, r6
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	4433      	add	r3, r6
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	2000      	movs	r0, #0
 8006656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665a:	462a      	mov	r2, r5
 800665c:	f000 fab6 	bl	8006bcc <_realloc_r>
 8006660:	4606      	mov	r6, r0
 8006662:	2800      	cmp	r0, #0
 8006664:	d1e0      	bne.n	8006628 <__ssputs_r+0x5c>
 8006666:	6921      	ldr	r1, [r4, #16]
 8006668:	4650      	mov	r0, sl
 800666a:	f7ff ff65 	bl	8006538 <_free_r>
 800666e:	230c      	movs	r3, #12
 8006670:	f8ca 3000 	str.w	r3, [sl]
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	e7e9      	b.n	8006656 <__ssputs_r+0x8a>
	...

08006684 <_svfiprintf_r>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4698      	mov	r8, r3
 800668a:	898b      	ldrh	r3, [r1, #12]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	b09d      	sub	sp, #116	@ 0x74
 8006690:	4607      	mov	r7, r0
 8006692:	460d      	mov	r5, r1
 8006694:	4614      	mov	r4, r2
 8006696:	d510      	bpl.n	80066ba <_svfiprintf_r+0x36>
 8006698:	690b      	ldr	r3, [r1, #16]
 800669a:	b973      	cbnz	r3, 80066ba <_svfiprintf_r+0x36>
 800669c:	2140      	movs	r1, #64	@ 0x40
 800669e:	f7ff fd99 	bl	80061d4 <_malloc_r>
 80066a2:	6028      	str	r0, [r5, #0]
 80066a4:	6128      	str	r0, [r5, #16]
 80066a6:	b930      	cbnz	r0, 80066b6 <_svfiprintf_r+0x32>
 80066a8:	230c      	movs	r3, #12
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	b01d      	add	sp, #116	@ 0x74
 80066b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b6:	2340      	movs	r3, #64	@ 0x40
 80066b8:	616b      	str	r3, [r5, #20]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066be:	2320      	movs	r3, #32
 80066c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c8:	2330      	movs	r3, #48	@ 0x30
 80066ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006868 <_svfiprintf_r+0x1e4>
 80066ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066d2:	f04f 0901 	mov.w	r9, #1
 80066d6:	4623      	mov	r3, r4
 80066d8:	469a      	mov	sl, r3
 80066da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066de:	b10a      	cbz	r2, 80066e4 <_svfiprintf_r+0x60>
 80066e0:	2a25      	cmp	r2, #37	@ 0x25
 80066e2:	d1f9      	bne.n	80066d8 <_svfiprintf_r+0x54>
 80066e4:	ebba 0b04 	subs.w	fp, sl, r4
 80066e8:	d00b      	beq.n	8006702 <_svfiprintf_r+0x7e>
 80066ea:	465b      	mov	r3, fp
 80066ec:	4622      	mov	r2, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	4638      	mov	r0, r7
 80066f2:	f7ff ff6b 	bl	80065cc <__ssputs_r>
 80066f6:	3001      	adds	r0, #1
 80066f8:	f000 80a7 	beq.w	800684a <_svfiprintf_r+0x1c6>
 80066fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066fe:	445a      	add	r2, fp
 8006700:	9209      	str	r2, [sp, #36]	@ 0x24
 8006702:	f89a 3000 	ldrb.w	r3, [sl]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 809f 	beq.w	800684a <_svfiprintf_r+0x1c6>
 800670c:	2300      	movs	r3, #0
 800670e:	f04f 32ff 	mov.w	r2, #4294967295
 8006712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006716:	f10a 0a01 	add.w	sl, sl, #1
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	9307      	str	r3, [sp, #28]
 800671e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006722:	931a      	str	r3, [sp, #104]	@ 0x68
 8006724:	4654      	mov	r4, sl
 8006726:	2205      	movs	r2, #5
 8006728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672c:	484e      	ldr	r0, [pc, #312]	@ (8006868 <_svfiprintf_r+0x1e4>)
 800672e:	f7f9 fd4f 	bl	80001d0 <memchr>
 8006732:	9a04      	ldr	r2, [sp, #16]
 8006734:	b9d8      	cbnz	r0, 800676e <_svfiprintf_r+0xea>
 8006736:	06d0      	lsls	r0, r2, #27
 8006738:	bf44      	itt	mi
 800673a:	2320      	movmi	r3, #32
 800673c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006740:	0711      	lsls	r1, r2, #28
 8006742:	bf44      	itt	mi
 8006744:	232b      	movmi	r3, #43	@ 0x2b
 8006746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800674a:	f89a 3000 	ldrb.w	r3, [sl]
 800674e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006750:	d015      	beq.n	800677e <_svfiprintf_r+0xfa>
 8006752:	9a07      	ldr	r2, [sp, #28]
 8006754:	4654      	mov	r4, sl
 8006756:	2000      	movs	r0, #0
 8006758:	f04f 0c0a 	mov.w	ip, #10
 800675c:	4621      	mov	r1, r4
 800675e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006762:	3b30      	subs	r3, #48	@ 0x30
 8006764:	2b09      	cmp	r3, #9
 8006766:	d94b      	bls.n	8006800 <_svfiprintf_r+0x17c>
 8006768:	b1b0      	cbz	r0, 8006798 <_svfiprintf_r+0x114>
 800676a:	9207      	str	r2, [sp, #28]
 800676c:	e014      	b.n	8006798 <_svfiprintf_r+0x114>
 800676e:	eba0 0308 	sub.w	r3, r0, r8
 8006772:	fa09 f303 	lsl.w	r3, r9, r3
 8006776:	4313      	orrs	r3, r2
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	46a2      	mov	sl, r4
 800677c:	e7d2      	b.n	8006724 <_svfiprintf_r+0xa0>
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	1d19      	adds	r1, r3, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	9103      	str	r1, [sp, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	bfbb      	ittet	lt
 800678a:	425b      	neglt	r3, r3
 800678c:	f042 0202 	orrlt.w	r2, r2, #2
 8006790:	9307      	strge	r3, [sp, #28]
 8006792:	9307      	strlt	r3, [sp, #28]
 8006794:	bfb8      	it	lt
 8006796:	9204      	strlt	r2, [sp, #16]
 8006798:	7823      	ldrb	r3, [r4, #0]
 800679a:	2b2e      	cmp	r3, #46	@ 0x2e
 800679c:	d10a      	bne.n	80067b4 <_svfiprintf_r+0x130>
 800679e:	7863      	ldrb	r3, [r4, #1]
 80067a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a2:	d132      	bne.n	800680a <_svfiprintf_r+0x186>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	1d1a      	adds	r2, r3, #4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	9203      	str	r2, [sp, #12]
 80067ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067b0:	3402      	adds	r4, #2
 80067b2:	9305      	str	r3, [sp, #20]
 80067b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006878 <_svfiprintf_r+0x1f4>
 80067b8:	7821      	ldrb	r1, [r4, #0]
 80067ba:	2203      	movs	r2, #3
 80067bc:	4650      	mov	r0, sl
 80067be:	f7f9 fd07 	bl	80001d0 <memchr>
 80067c2:	b138      	cbz	r0, 80067d4 <_svfiprintf_r+0x150>
 80067c4:	9b04      	ldr	r3, [sp, #16]
 80067c6:	eba0 000a 	sub.w	r0, r0, sl
 80067ca:	2240      	movs	r2, #64	@ 0x40
 80067cc:	4082      	lsls	r2, r0
 80067ce:	4313      	orrs	r3, r2
 80067d0:	3401      	adds	r4, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d8:	4824      	ldr	r0, [pc, #144]	@ (800686c <_svfiprintf_r+0x1e8>)
 80067da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067de:	2206      	movs	r2, #6
 80067e0:	f7f9 fcf6 	bl	80001d0 <memchr>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d036      	beq.n	8006856 <_svfiprintf_r+0x1d2>
 80067e8:	4b21      	ldr	r3, [pc, #132]	@ (8006870 <_svfiprintf_r+0x1ec>)
 80067ea:	bb1b      	cbnz	r3, 8006834 <_svfiprintf_r+0x1b0>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	3307      	adds	r3, #7
 80067f0:	f023 0307 	bic.w	r3, r3, #7
 80067f4:	3308      	adds	r3, #8
 80067f6:	9303      	str	r3, [sp, #12]
 80067f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067fa:	4433      	add	r3, r6
 80067fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fe:	e76a      	b.n	80066d6 <_svfiprintf_r+0x52>
 8006800:	fb0c 3202 	mla	r2, ip, r2, r3
 8006804:	460c      	mov	r4, r1
 8006806:	2001      	movs	r0, #1
 8006808:	e7a8      	b.n	800675c <_svfiprintf_r+0xd8>
 800680a:	2300      	movs	r3, #0
 800680c:	3401      	adds	r4, #1
 800680e:	9305      	str	r3, [sp, #20]
 8006810:	4619      	mov	r1, r3
 8006812:	f04f 0c0a 	mov.w	ip, #10
 8006816:	4620      	mov	r0, r4
 8006818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800681c:	3a30      	subs	r2, #48	@ 0x30
 800681e:	2a09      	cmp	r2, #9
 8006820:	d903      	bls.n	800682a <_svfiprintf_r+0x1a6>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0c6      	beq.n	80067b4 <_svfiprintf_r+0x130>
 8006826:	9105      	str	r1, [sp, #20]
 8006828:	e7c4      	b.n	80067b4 <_svfiprintf_r+0x130>
 800682a:	fb0c 2101 	mla	r1, ip, r1, r2
 800682e:	4604      	mov	r4, r0
 8006830:	2301      	movs	r3, #1
 8006832:	e7f0      	b.n	8006816 <_svfiprintf_r+0x192>
 8006834:	ab03      	add	r3, sp, #12
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	462a      	mov	r2, r5
 800683a:	4b0e      	ldr	r3, [pc, #56]	@ (8006874 <_svfiprintf_r+0x1f0>)
 800683c:	a904      	add	r1, sp, #16
 800683e:	4638      	mov	r0, r7
 8006840:	f3af 8000 	nop.w
 8006844:	1c42      	adds	r2, r0, #1
 8006846:	4606      	mov	r6, r0
 8006848:	d1d6      	bne.n	80067f8 <_svfiprintf_r+0x174>
 800684a:	89ab      	ldrh	r3, [r5, #12]
 800684c:	065b      	lsls	r3, r3, #25
 800684e:	f53f af2d 	bmi.w	80066ac <_svfiprintf_r+0x28>
 8006852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006854:	e72c      	b.n	80066b0 <_svfiprintf_r+0x2c>
 8006856:	ab03      	add	r3, sp, #12
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	462a      	mov	r2, r5
 800685c:	4b05      	ldr	r3, [pc, #20]	@ (8006874 <_svfiprintf_r+0x1f0>)
 800685e:	a904      	add	r1, sp, #16
 8006860:	4638      	mov	r0, r7
 8006862:	f000 f879 	bl	8006958 <_printf_i>
 8006866:	e7ed      	b.n	8006844 <_svfiprintf_r+0x1c0>
 8006868:	08006cd0 	.word	0x08006cd0
 800686c:	08006cda 	.word	0x08006cda
 8006870:	00000000 	.word	0x00000000
 8006874:	080065cd 	.word	0x080065cd
 8006878:	08006cd6 	.word	0x08006cd6

0800687c <_printf_common>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	4616      	mov	r6, r2
 8006882:	4698      	mov	r8, r3
 8006884:	688a      	ldr	r2, [r1, #8]
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800688c:	4293      	cmp	r3, r2
 800688e:	bfb8      	it	lt
 8006890:	4613      	movlt	r3, r2
 8006892:	6033      	str	r3, [r6, #0]
 8006894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006898:	4607      	mov	r7, r0
 800689a:	460c      	mov	r4, r1
 800689c:	b10a      	cbz	r2, 80068a2 <_printf_common+0x26>
 800689e:	3301      	adds	r3, #1
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	0699      	lsls	r1, r3, #26
 80068a6:	bf42      	ittt	mi
 80068a8:	6833      	ldrmi	r3, [r6, #0]
 80068aa:	3302      	addmi	r3, #2
 80068ac:	6033      	strmi	r3, [r6, #0]
 80068ae:	6825      	ldr	r5, [r4, #0]
 80068b0:	f015 0506 	ands.w	r5, r5, #6
 80068b4:	d106      	bne.n	80068c4 <_printf_common+0x48>
 80068b6:	f104 0a19 	add.w	sl, r4, #25
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	6832      	ldr	r2, [r6, #0]
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dc26      	bgt.n	8006912 <_printf_common+0x96>
 80068c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	3b00      	subs	r3, #0
 80068cc:	bf18      	it	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	0692      	lsls	r2, r2, #26
 80068d2:	d42b      	bmi.n	800692c <_printf_common+0xb0>
 80068d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d8:	4641      	mov	r1, r8
 80068da:	4638      	mov	r0, r7
 80068dc:	47c8      	blx	r9
 80068de:	3001      	adds	r0, #1
 80068e0:	d01e      	beq.n	8006920 <_printf_common+0xa4>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	f003 0306 	and.w	r3, r3, #6
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	bf02      	ittt	eq
 80068ee:	68e5      	ldreq	r5, [r4, #12]
 80068f0:	6833      	ldreq	r3, [r6, #0]
 80068f2:	1aed      	subeq	r5, r5, r3
 80068f4:	68a3      	ldr	r3, [r4, #8]
 80068f6:	bf0c      	ite	eq
 80068f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068fc:	2500      	movne	r5, #0
 80068fe:	4293      	cmp	r3, r2
 8006900:	bfc4      	itt	gt
 8006902:	1a9b      	subgt	r3, r3, r2
 8006904:	18ed      	addgt	r5, r5, r3
 8006906:	2600      	movs	r6, #0
 8006908:	341a      	adds	r4, #26
 800690a:	42b5      	cmp	r5, r6
 800690c:	d11a      	bne.n	8006944 <_printf_common+0xc8>
 800690e:	2000      	movs	r0, #0
 8006910:	e008      	b.n	8006924 <_printf_common+0xa8>
 8006912:	2301      	movs	r3, #1
 8006914:	4652      	mov	r2, sl
 8006916:	4641      	mov	r1, r8
 8006918:	4638      	mov	r0, r7
 800691a:	47c8      	blx	r9
 800691c:	3001      	adds	r0, #1
 800691e:	d103      	bne.n	8006928 <_printf_common+0xac>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006928:	3501      	adds	r5, #1
 800692a:	e7c6      	b.n	80068ba <_printf_common+0x3e>
 800692c:	18e1      	adds	r1, r4, r3
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	2030      	movs	r0, #48	@ 0x30
 8006932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006936:	4422      	add	r2, r4
 8006938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800693c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006940:	3302      	adds	r3, #2
 8006942:	e7c7      	b.n	80068d4 <_printf_common+0x58>
 8006944:	2301      	movs	r3, #1
 8006946:	4622      	mov	r2, r4
 8006948:	4641      	mov	r1, r8
 800694a:	4638      	mov	r0, r7
 800694c:	47c8      	blx	r9
 800694e:	3001      	adds	r0, #1
 8006950:	d0e6      	beq.n	8006920 <_printf_common+0xa4>
 8006952:	3601      	adds	r6, #1
 8006954:	e7d9      	b.n	800690a <_printf_common+0x8e>
	...

08006958 <_printf_i>:
 8006958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	7e0f      	ldrb	r7, [r1, #24]
 800695e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006960:	2f78      	cmp	r7, #120	@ 0x78
 8006962:	4691      	mov	r9, r2
 8006964:	4680      	mov	r8, r0
 8006966:	460c      	mov	r4, r1
 8006968:	469a      	mov	sl, r3
 800696a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800696e:	d807      	bhi.n	8006980 <_printf_i+0x28>
 8006970:	2f62      	cmp	r7, #98	@ 0x62
 8006972:	d80a      	bhi.n	800698a <_printf_i+0x32>
 8006974:	2f00      	cmp	r7, #0
 8006976:	f000 80d2 	beq.w	8006b1e <_printf_i+0x1c6>
 800697a:	2f58      	cmp	r7, #88	@ 0x58
 800697c:	f000 80b9 	beq.w	8006af2 <_printf_i+0x19a>
 8006980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006988:	e03a      	b.n	8006a00 <_printf_i+0xa8>
 800698a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800698e:	2b15      	cmp	r3, #21
 8006990:	d8f6      	bhi.n	8006980 <_printf_i+0x28>
 8006992:	a101      	add	r1, pc, #4	@ (adr r1, 8006998 <_printf_i+0x40>)
 8006994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006998:	080069f1 	.word	0x080069f1
 800699c:	08006a05 	.word	0x08006a05
 80069a0:	08006981 	.word	0x08006981
 80069a4:	08006981 	.word	0x08006981
 80069a8:	08006981 	.word	0x08006981
 80069ac:	08006981 	.word	0x08006981
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006981 	.word	0x08006981
 80069b8:	08006981 	.word	0x08006981
 80069bc:	08006981 	.word	0x08006981
 80069c0:	08006981 	.word	0x08006981
 80069c4:	08006b05 	.word	0x08006b05
 80069c8:	08006a2f 	.word	0x08006a2f
 80069cc:	08006abf 	.word	0x08006abf
 80069d0:	08006981 	.word	0x08006981
 80069d4:	08006981 	.word	0x08006981
 80069d8:	08006b27 	.word	0x08006b27
 80069dc:	08006981 	.word	0x08006981
 80069e0:	08006a2f 	.word	0x08006a2f
 80069e4:	08006981 	.word	0x08006981
 80069e8:	08006981 	.word	0x08006981
 80069ec:	08006ac7 	.word	0x08006ac7
 80069f0:	6833      	ldr	r3, [r6, #0]
 80069f2:	1d1a      	adds	r2, r3, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6032      	str	r2, [r6, #0]
 80069f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a00:	2301      	movs	r3, #1
 8006a02:	e09d      	b.n	8006b40 <_printf_i+0x1e8>
 8006a04:	6833      	ldr	r3, [r6, #0]
 8006a06:	6820      	ldr	r0, [r4, #0]
 8006a08:	1d19      	adds	r1, r3, #4
 8006a0a:	6031      	str	r1, [r6, #0]
 8006a0c:	0606      	lsls	r6, r0, #24
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0xbc>
 8006a10:	681d      	ldr	r5, [r3, #0]
 8006a12:	e003      	b.n	8006a1c <_printf_i+0xc4>
 8006a14:	0645      	lsls	r5, r0, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0xb8>
 8006a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	da03      	bge.n	8006a28 <_printf_i+0xd0>
 8006a20:	232d      	movs	r3, #45	@ 0x2d
 8006a22:	426d      	negs	r5, r5
 8006a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a28:	4859      	ldr	r0, [pc, #356]	@ (8006b90 <_printf_i+0x238>)
 8006a2a:	230a      	movs	r3, #10
 8006a2c:	e011      	b.n	8006a52 <_printf_i+0xfa>
 8006a2e:	6821      	ldr	r1, [r4, #0]
 8006a30:	6833      	ldr	r3, [r6, #0]
 8006a32:	0608      	lsls	r0, r1, #24
 8006a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a38:	d402      	bmi.n	8006a40 <_printf_i+0xe8>
 8006a3a:	0649      	lsls	r1, r1, #25
 8006a3c:	bf48      	it	mi
 8006a3e:	b2ad      	uxthmi	r5, r5
 8006a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a42:	4853      	ldr	r0, [pc, #332]	@ (8006b90 <_printf_i+0x238>)
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	bf14      	ite	ne
 8006a48:	230a      	movne	r3, #10
 8006a4a:	2308      	moveq	r3, #8
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a52:	6866      	ldr	r6, [r4, #4]
 8006a54:	60a6      	str	r6, [r4, #8]
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	bfa2      	ittt	ge
 8006a5a:	6821      	ldrge	r1, [r4, #0]
 8006a5c:	f021 0104 	bicge.w	r1, r1, #4
 8006a60:	6021      	strge	r1, [r4, #0]
 8006a62:	b90d      	cbnz	r5, 8006a68 <_printf_i+0x110>
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	d04b      	beq.n	8006b00 <_printf_i+0x1a8>
 8006a68:	4616      	mov	r6, r2
 8006a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8006a72:	5dc7      	ldrb	r7, [r0, r7]
 8006a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a78:	462f      	mov	r7, r5
 8006a7a:	42bb      	cmp	r3, r7
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	d9f4      	bls.n	8006a6a <_printf_i+0x112>
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d10b      	bne.n	8006a9c <_printf_i+0x144>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	07df      	lsls	r7, r3, #31
 8006a88:	d508      	bpl.n	8006a9c <_printf_i+0x144>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6861      	ldr	r1, [r4, #4]
 8006a8e:	4299      	cmp	r1, r3
 8006a90:	bfde      	ittt	le
 8006a92:	2330      	movle	r3, #48	@ 0x30
 8006a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a9c:	1b92      	subs	r2, r2, r6
 8006a9e:	6122      	str	r2, [r4, #16]
 8006aa0:	f8cd a000 	str.w	sl, [sp]
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	aa03      	add	r2, sp, #12
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4640      	mov	r0, r8
 8006aac:	f7ff fee6 	bl	800687c <_printf_common>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d14a      	bne.n	8006b4a <_printf_i+0x1f2>
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	b004      	add	sp, #16
 8006aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f043 0320 	orr.w	r3, r3, #32
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	4833      	ldr	r0, [pc, #204]	@ (8006b94 <_printf_i+0x23c>)
 8006ac8:	2778      	movs	r7, #120	@ 0x78
 8006aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	6831      	ldr	r1, [r6, #0]
 8006ad2:	061f      	lsls	r7, r3, #24
 8006ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ad8:	d402      	bmi.n	8006ae0 <_printf_i+0x188>
 8006ada:	065f      	lsls	r7, r3, #25
 8006adc:	bf48      	it	mi
 8006ade:	b2ad      	uxthmi	r5, r5
 8006ae0:	6031      	str	r1, [r6, #0]
 8006ae2:	07d9      	lsls	r1, r3, #31
 8006ae4:	bf44      	itt	mi
 8006ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aea:	6023      	strmi	r3, [r4, #0]
 8006aec:	b11d      	cbz	r5, 8006af6 <_printf_i+0x19e>
 8006aee:	2310      	movs	r3, #16
 8006af0:	e7ac      	b.n	8006a4c <_printf_i+0xf4>
 8006af2:	4827      	ldr	r0, [pc, #156]	@ (8006b90 <_printf_i+0x238>)
 8006af4:	e7e9      	b.n	8006aca <_printf_i+0x172>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	f023 0320 	bic.w	r3, r3, #32
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	e7f6      	b.n	8006aee <_printf_i+0x196>
 8006b00:	4616      	mov	r6, r2
 8006b02:	e7bd      	b.n	8006a80 <_printf_i+0x128>
 8006b04:	6833      	ldr	r3, [r6, #0]
 8006b06:	6825      	ldr	r5, [r4, #0]
 8006b08:	6961      	ldr	r1, [r4, #20]
 8006b0a:	1d18      	adds	r0, r3, #4
 8006b0c:	6030      	str	r0, [r6, #0]
 8006b0e:	062e      	lsls	r6, r5, #24
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	d501      	bpl.n	8006b18 <_printf_i+0x1c0>
 8006b14:	6019      	str	r1, [r3, #0]
 8006b16:	e002      	b.n	8006b1e <_printf_i+0x1c6>
 8006b18:	0668      	lsls	r0, r5, #25
 8006b1a:	d5fb      	bpl.n	8006b14 <_printf_i+0x1bc>
 8006b1c:	8019      	strh	r1, [r3, #0]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	4616      	mov	r6, r2
 8006b24:	e7bc      	b.n	8006aa0 <_printf_i+0x148>
 8006b26:	6833      	ldr	r3, [r6, #0]
 8006b28:	1d1a      	adds	r2, r3, #4
 8006b2a:	6032      	str	r2, [r6, #0]
 8006b2c:	681e      	ldr	r6, [r3, #0]
 8006b2e:	6862      	ldr	r2, [r4, #4]
 8006b30:	2100      	movs	r1, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7f9 fb4c 	bl	80001d0 <memchr>
 8006b38:	b108      	cbz	r0, 8006b3e <_printf_i+0x1e6>
 8006b3a:	1b80      	subs	r0, r0, r6
 8006b3c:	6060      	str	r0, [r4, #4]
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	2300      	movs	r3, #0
 8006b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b48:	e7aa      	b.n	8006aa0 <_printf_i+0x148>
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	47d0      	blx	sl
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0ad      	beq.n	8006ab4 <_printf_i+0x15c>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	079b      	lsls	r3, r3, #30
 8006b5c:	d413      	bmi.n	8006b86 <_printf_i+0x22e>
 8006b5e:	68e0      	ldr	r0, [r4, #12]
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	4298      	cmp	r0, r3
 8006b64:	bfb8      	it	lt
 8006b66:	4618      	movlt	r0, r3
 8006b68:	e7a6      	b.n	8006ab8 <_printf_i+0x160>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	47d0      	blx	sl
 8006b74:	3001      	adds	r0, #1
 8006b76:	d09d      	beq.n	8006ab4 <_printf_i+0x15c>
 8006b78:	3501      	adds	r5, #1
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	9903      	ldr	r1, [sp, #12]
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	dcf2      	bgt.n	8006b6a <_printf_i+0x212>
 8006b84:	e7eb      	b.n	8006b5e <_printf_i+0x206>
 8006b86:	2500      	movs	r5, #0
 8006b88:	f104 0619 	add.w	r6, r4, #25
 8006b8c:	e7f5      	b.n	8006b7a <_printf_i+0x222>
 8006b8e:	bf00      	nop
 8006b90:	08006ce1 	.word	0x08006ce1
 8006b94:	08006cf2 	.word	0x08006cf2

08006b98 <memmove>:
 8006b98:	4288      	cmp	r0, r1
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	eb01 0402 	add.w	r4, r1, r2
 8006ba0:	d902      	bls.n	8006ba8 <memmove+0x10>
 8006ba2:	4284      	cmp	r4, r0
 8006ba4:	4623      	mov	r3, r4
 8006ba6:	d807      	bhi.n	8006bb8 <memmove+0x20>
 8006ba8:	1e43      	subs	r3, r0, #1
 8006baa:	42a1      	cmp	r1, r4
 8006bac:	d008      	beq.n	8006bc0 <memmove+0x28>
 8006bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bb6:	e7f8      	b.n	8006baa <memmove+0x12>
 8006bb8:	4402      	add	r2, r0
 8006bba:	4601      	mov	r1, r0
 8006bbc:	428a      	cmp	r2, r1
 8006bbe:	d100      	bne.n	8006bc2 <memmove+0x2a>
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bca:	e7f7      	b.n	8006bbc <memmove+0x24>

08006bcc <_realloc_r>:
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	4615      	mov	r5, r2
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	b921      	cbnz	r1, 8006be2 <_realloc_r+0x16>
 8006bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bdc:	4611      	mov	r1, r2
 8006bde:	f7ff baf9 	b.w	80061d4 <_malloc_r>
 8006be2:	b92a      	cbnz	r2, 8006bf0 <_realloc_r+0x24>
 8006be4:	f7ff fca8 	bl	8006538 <_free_r>
 8006be8:	2400      	movs	r4, #0
 8006bea:	4620      	mov	r0, r4
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	f000 f81a 	bl	8006c28 <_malloc_usable_size_r>
 8006bf4:	4285      	cmp	r5, r0
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	d802      	bhi.n	8006c00 <_realloc_r+0x34>
 8006bfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006bfe:	d8f4      	bhi.n	8006bea <_realloc_r+0x1e>
 8006c00:	4629      	mov	r1, r5
 8006c02:	4640      	mov	r0, r8
 8006c04:	f7ff fae6 	bl	80061d4 <_malloc_r>
 8006c08:	4607      	mov	r7, r0
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d0ec      	beq.n	8006be8 <_realloc_r+0x1c>
 8006c0e:	42b5      	cmp	r5, r6
 8006c10:	462a      	mov	r2, r5
 8006c12:	4621      	mov	r1, r4
 8006c14:	bf28      	it	cs
 8006c16:	4632      	movcs	r2, r6
 8006c18:	f7ff fc80 	bl	800651c <memcpy>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4640      	mov	r0, r8
 8006c20:	f7ff fc8a 	bl	8006538 <_free_r>
 8006c24:	463c      	mov	r4, r7
 8006c26:	e7e0      	b.n	8006bea <_realloc_r+0x1e>

08006c28 <_malloc_usable_size_r>:
 8006c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2c:	1f18      	subs	r0, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfbc      	itt	lt
 8006c32:	580b      	ldrlt	r3, [r1, r0]
 8006c34:	18c0      	addlt	r0, r0, r3
 8006c36:	4770      	bx	lr

08006c38 <_init>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr

08006c44 <_fini>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr
